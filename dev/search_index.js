var documenterSearchIndex = {"docs":
[{"location":"#ClimaCache.jl","page":"Home","title":"ClimaCache.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cache system for CliMA Land model.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(\"ClimaCache\");","category":"page"},{"location":"API/#ClimaCache","page":"API","title":"ClimaCache","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = ClimaCache","category":"page"},{"location":"API/#Air","page":"API","title":"Air","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AirLayer\nAirLayer{FT}() where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AirLayer","page":"API","title":"ClimaCache.AirLayer","text":"mutable struct AirLayer{FT<:AbstractFloat}\n\nStructure that stores air layer information\n\nFields\n\nP_AIR::AbstractFloat\nAtmospheric pressure [Pa]\nP_O₂::AbstractFloat\nO₂ partial pressure [Pa]\np_CO₂::AbstractFloat\nCO₂ partial pressure [Pa]\np_H₂O::AbstractFloat\nH₂O partial pressure [Pa]\nt::AbstractFloat\nTemperature\nwind::AbstractFloat\nWind speed [m s⁻¹]\np_H₂O_sat::AbstractFloat\nSaturated H₂O partial pressure [Pa]\nrh::AbstractFloat\nrelative humidity\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AirLayer-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.AirLayer","text":"AirLayer{FT}() where {FT<:AbstractFloat}\n\nConstructor for AirLayer\n\n\n\nExamples\n\nair = AirLayer{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#Plant","page":"API","title":"Plant","text":"","category":"section"},{"location":"API/#Hydraulics","page":"API","title":"Hydraulics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractPVCurve\nLinearPVCurve\nLinearPVCurve{FT}() where {FT<:AbstractFloat}\nSegmentedPVCurve\nSegmentedPVCurve{FT}() where {FT<:AbstractFloat}\nAbstractHydraulicSystem\nAbstractXylemVC\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\nAbstractFlowProfile\nNonSteadyStateFlow\nNonSteadyStateFlow{FT}(N::Int, isleaf::Bool = true) where {FT<:AbstractFloat}\nSteadyStateFlow\nLeafHydraulics\nLeafHydraulics{FT}(N::Int = 5; area::Number = 1500, k_ox::Number = 100, k_sla::Number = 0.04, v_max::Number = 20, ssm::Bool = true) where {FT<:AbstractFloat}\nRootHydraulics\nRootHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}\nStemHydraulics\nStemHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AbstractPVCurve","page":"API","title":"ClimaCache.AbstractPVCurve","text":"abstract type AbstractPVCurve{FT<:AbstractFloat}\n\nHierarchy of AbstractPVCurve:\n\nLinearPVCurve\nSegmentedPVCurve\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LinearPVCurve","page":"API","title":"ClimaCache.LinearPVCurve","text":"mutable struct LinearPVCurve{FT<:AbstractFloat} <: ClimaCache.AbstractPVCurve{FT<:AbstractFloat}\n\nStruct that contains information for linear PV curve\n\nFields\n\nK_REFILL::AbstractFloat\nConductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\nSLOPE::AbstractFloat\nSlope of the linear PV curve (relative to maximum) [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LinearPVCurve-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.LinearPVCurve","text":"LinearPVCurve{FT}() where {FT<:AbstractFloat}\n\nConstructor for LinearPVCurve\n\n\n\nExamples\n\npvc = LinearPVCurve{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.SegmentedPVCurve","page":"API","title":"ClimaCache.SegmentedPVCurve","text":"mutable struct SegmentedPVCurve{FT} <: ClimaCache.AbstractPVCurve{FT}\n\nStruct that contains information for segmented PV curve\n\nFields\n\nC_ALL::Any\nn_o / maximum V [mol m⁻³]\nK_REFILL::Any\nConductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\nRWC_APO::Any\nApoplastic water content relative to maximum water volume\nRWC_TLP::Any\nRelative water content at turgor loss point\nΕ_BULK::Any\nBulk modulus of elasticity [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SegmentedPVCurve-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.SegmentedPVCurve","text":"SegmentedPVCurve{FT}() where {FT<:AbstractFloat}\n\nConstructor for SegmentedPVCurve\n\n\n\nExamples\n\npvc = SegmentedPVCurve{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractHydraulicSystem","page":"API","title":"ClimaCache.AbstractHydraulicSystem","text":"abstract type AbstractHydraulicSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractHydraulicSystem:\n\nLeafHydraulics\nRootHydraulics\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractXylemVC","page":"API","title":"ClimaCache.AbstractXylemVC","text":"abstract type AbstractXylemVC{FT<:AbstractFloat}\n\nHierarchy of AbstractXylemVC:\n\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LogisticVC","page":"API","title":"ClimaCache.LogisticVC","text":"mutable struct LogisticVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nModified logistic function for vulnerability curve\n\nFields\n\nA::AbstractFloat\nMultiplier to exponential component\nB::AbstractFloat\nMultiplier to pressure [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.PowerVC","page":"API","title":"ClimaCache.PowerVC","text":"mutable struct PowerVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nPower function for vulnerability curve\n\nFields\n\nA::AbstractFloat\nMultiplier to power component [MPa⁻ᵇ]\nB::AbstractFloat\nPower to pressure\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WeibullVC","page":"API","title":"ClimaCache.WeibullVC","text":"mutable struct WeibullVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nWeibull cumulative distribution function for vulnerability curve\n\nFields\n\nB::AbstractFloat\nNumerator in the exponential component [MPa]\nC::AbstractFloat\nPower to pressure component\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.ComplexVC","page":"API","title":"ClimaCache.ComplexVC","text":"mutable struct ComplexVC{FT} <: ClimaCache.AbstractXylemVC{FT}\n\nA complex struct for segmented vulnerability curve such as dual Weibull function\n\nFields\n\nPS::Vector\nPercentages of each VC component\nVCS::Union{Array{ClimaCache.AbstractXylemVC{FT}, 1}, Array{ClimaCache.LogisticVC{FT}, 1}, Array{ClimaCache.PowerVC{FT}, 1}, Array{ClimaCache.WeibullVC{FT}, 1}} where FT\nVector of vulnerability curve components\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractFlowProfile","page":"API","title":"ClimaCache.AbstractFlowProfile","text":"abstract type AbstractFlowProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractFlowProfile:\n\nNonSteadyStateFlow\nSteadyStateFlow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.NonSteadyStateFlow","page":"API","title":"ClimaCache.NonSteadyStateFlow","text":"mutable struct NonSteadyStateFlow{FT} <: ClimaCache.AbstractFlowProfile{FT}\n\nStruct that contains stem hydraulic system flow rates at non-steady state\n\nFields\n\nf_buffer::Vector\nVector of buffer water flow [mol m⁻²]\nf_element::Vector\nVector of xylem water flow [mol m⁻²]\nf_in::Any\nFlow rate in [mol s⁻¹] or [mol m⁻² s⁻¹] (for leaf)\nf_out::Any\nFlow rate out [mol s⁻¹] or [mol m⁻² s⁻¹] (for leaf)\nf_sum::Vector\nVector of sum buffer water flow [mol m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.NonSteadyStateFlow-Union{Tuple{Int64}, Tuple{Int64, Bool}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.NonSteadyStateFlow","text":"NonSteadyStateFlow{FT}(N::Int, isleaf::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a non-steady state flow struct, given\n\nN Number of buffer rates from capaciatance (always 1 for Leaf)\nisleaf Bool to indicate if the organ is a leaf\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.SteadyStateFlow","page":"API","title":"ClimaCache.SteadyStateFlow","text":"mutable struct SteadyStateFlow{FT} <: ClimaCache.AbstractFlowProfile{FT}\n\nStruct that contains stem hydraulic system flow rates at steady state\n\nFields\n\nflow::Any\nFlow rate [mol s⁻¹] or [mol m⁻² s⁻¹] (for leaf)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafHydraulics","page":"API","title":"ClimaCache.LeafHydraulics","text":"mutable struct LeafHydraulics{FT} <: ClimaCache.AbstractHydraulicSystem{FT}\n\nStruct that contains leaf hydraulic system\n\nFields\n\nAREA::Any\nLeaf area\nFLOW::ClimaCache.AbstractFlowProfile{FT} where FT\nFlow profile\nK_OX::Any\nMaximal extra-xylary hydraulic conductance [mol s⁻¹ MPa⁻¹ m⁻²]\nK_SLA::Any\nMaximal leaf xylem hydraulic conductance per leaf area [mol s⁻¹ MPa⁻¹ m⁻²]\nN::Int64\nNumber of xylem slices\nPVC::ClimaCache.AbstractPVCurve{FT} where FT\nPressure volume curve for storage\nV_MAXIMUM::Any\nTotal capaciatance at Ψ = 0 [mol m⁻²]\nVC::ClimaCache.AbstractXylemVC{FT} where FT\nVulnerability curve\np_dos::Any\nLeaf xylem water pressure at the downstream end of leaf xylem [MPa]\np_leaf::Any\nLeaf end water pressure at air-water interface [MPa]\np_storage::Any\nPressure of storage\np_ups::Any\nLeaf xylem water pressure at the leaf base (upstream) [MPa]\nv_storage::Any\nCurrent capaciatance at Ψ_leaf [mol m⁻²]\nk_history::Vector\nVector of leaf kr history per element\np_element::Vector\nVector of xylem water pressure [MPa]\np_history::Vector\nVector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafHydraulics-Union{Tuple{}, Tuple{Int64}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.LeafHydraulics","text":"LeafHydraulics{FT}(N::Int = 5; area::Number = 1500, k_ox::Number = 100, k_sla::Number = 0.04, v_max::Number = 20, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for leaf hydraulic system, given\n\nN Number of xylem slices in the system, default is 5\narea Leaf area\nk_ox Maximum extraxylary hydraulic conductance per leaf area\nk_sla Maximum leaf xylem hydraulic conductance per leaf area\nv_max Total water capacitance at Ψ = 0 per leaf area\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nlhs = LeafHydraulics{Float64}();\nlhs = LeafHydraulics{Float64}(N = 5);\nlhs = LeafHydraulics{Float64}(N = 5; area = 20, k_ox = 50, k_sla = 0.1, v_max = 20, ssm = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.RootHydraulics","page":"API","title":"ClimaCache.RootHydraulics","text":"mutable struct RootHydraulics{FT} <: ClimaCache.AbstractHydraulicSystem{FT}\n\nStruct that contains root hydraulic system\n\nFields\n\nAREA::Any\nRoot cross-section area [m²]\nFLOW::ClimaCache.AbstractFlowProfile{FT} where FT\nFlow profile\nK_MAX::Any\nMaximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nK_RHIZ::Any\nRhizosphere  conductance [mol s⁻¹ MPa⁻¹]\nK_X::Any\nMaximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\nL::Any\nLength [m]\nN::Int64\nNumber of xylem slices\nPVC::ClimaCache.AbstractPVCurve{FT} where FT\nPressure volume curve for storage\nSH::ClimaCache.AbstractSoilVC{FT} where FT\nSoil hydraulics\nV_MAXIMUM::Vector\nMaximal storage per element [mol]\nVC::ClimaCache.AbstractXylemVC{FT} where FT\nVulnerability curve\nΔH::Any\nRoot z difference [m]\np_dos::Any\nXylem water pressure at the downstream end of xylem [MPa]\np_rhiz::Any\nXylem-rhizosphere interface water pressure [MPa]\np_storage::Vector\nPressure of storage per element\np_ups::Any\nSoil matrix potential [MPa]\nv_storage::Vector\nStorage per element [mol]\nψ_osm::Any\nSoil osmotic potential at 298.15 K `[MPa]\nk_history::Vector\nVector of leaf kr history per element\np_element::Vector\nVector of xylem water pressure [MPa]\np_history::Vector\nVector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.RootHydraulics-Union{Tuple{}, Tuple{Int64}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.RootHydraulics","text":"RootHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for root hydraulic system, given\n\nN Number of xylem slices in the system, default is 5\narea Root crosssection area\nk_x Maximum root xylem hydraulic conductivity per crosssection area per root length\nΔh Root depth\nΔl Root length\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nrhs = RootHydraulics{Float64}();\nrhs = RootHydraulics{Float64}(N = 5);\nrhs = RootHydraulics{Float64}(N = 5; area = 1, k_x = 50, Δh = 1, Δl = 2, ssm = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.StemHydraulics","page":"API","title":"ClimaCache.StemHydraulics","text":"mutable struct StemHydraulics{FT} <: ClimaCache.AbstractHydraulicSystem{FT}\n\nStruct that contains stem hydraulic system\n\nFields\n\nAREA::Any\nRoot cross-section area [m²]\nFLOW::ClimaCache.AbstractFlowProfile{FT} where FT\nFlow profile\nK_MAX::Any\nMaximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nK_X::Any\nMaximal xylem hydraulic conductivity (per root depth) [mol s⁻¹ MPa⁻¹ m⁻²]\nL::Any\nLength [m]\nN::Int64\nNumber of xylem slices\nPVC::ClimaCache.AbstractPVCurve{FT} where FT\nPressure volume curve for storage\nV_MAXIMUM::Vector\nMaximal storage per element [mol]\nVC::ClimaCache.AbstractXylemVC{FT} where FT\nVulnerability curve\nΔH::Any\nRoot z difference [m]\np_dos::Any\nXylem water pressure at the downstream end of xylem [MPa]\np_storage::Vector\nPressure of storage per element\np_ups::Any\nSoil matrix potential [MPa]\nv_storage::Vector\nStorage per element [mol]\nk_history::Vector\nVector of leaf kr history per element\np_element::Vector\nVector of xylem water pressure [MPa]\np_history::Vector\nVector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.StemHydraulics-Union{Tuple{}, Tuple{Int64}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.StemHydraulics","text":"StemHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for stem hydraulic system, given\n\nN Number of xylem slices in the system, default is 5\narea Root crosssection area\nk_x Maximum stem xylem hydraulic conductivity per crosssection area per stem length\nΔh Stem height\nΔl Stem length\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nrhs = StemHydraulics{Float64}();\nrhs = StemHydraulics{Float64}(N = 5);\nrhs = StemHydraulics{Float64}(N = 5; area = 1, k_x = 50, Δh = 2, ssm = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#Leaf-Level","page":"API","title":"Leaf Level","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Leaf\nLeaf{FT}(psm::String, wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); colimit::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\nLeafBiophysics\nLeafBiophysics{FT}(wls::WaveLengthSet{FT} = WaveLengthSet{FT}()) where {FT<:AbstractFloat}\nVanDerTolFluorescenceModel\nVanDerTolFluorescenceModel{FT}(drought::Bool = false) where {FT<:AbstractFloat}\nAbstractReactionCenter\nVJPReactionCenter\nVJPReactionCenter{FT}() where {FT<:AbstractFloat}\nCytochromeReactionCenter\nCytochromeReactionCenter{FT}() where {FT<:AbstractFloat}\nAbstractPhotosynthesisModel\nC3CytochromeModel\nC3CytochromeModel{FT}(; v_cmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\nC3VJPModel\nC3VJPModel{FT}(; v_cmax25::Number = 50, j_max25::Number = 83.5, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\nC4VJPModel\nC4VJPModel{FT}(; v_cmax25::Number = 50, v_pmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\nAbstractPhotosynthesisMode\nGCO₂Mode\nPCO₂Mode\nAbstractColimit\nMinimumColimit\nQuadraticColimit\nSerialColimit\nAbstractTemperatureDependency\nArrhenius\nArrheniusPeak\nQ10","category":"page"},{"location":"API/#ClimaCache.Leaf","page":"API","title":"ClimaCache.Leaf","text":"mutable struct Leaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters\n\nFields\n\nBIO::ClimaCache.LeafBiophysics\nLeafBiophysics type leaf biophysical parameters\nHS::ClimaCache.LeafHydraulics{FT} where FT<:AbstractFloat\nLeafHydraulics type leaf hydraulic system\nPRC::ClimaCache.AbstractReactionCenter\nAbstractReactionCenter type photosynthesis reaction center\nPSM::ClimaCache.AbstractPhotosynthesisModel\nAbstractPhotosynthesisModel type photosynthesis model\napar::AbstractFloat\nAbsorbed photosynthetically active radiation [μmol m⁻² s⁻¹]\ng_H₂O_s::AbstractFloat\nStomatal conductance to water vapor [mol m⁻² s⁻¹]\nt::AbstractFloat\nCurrent leaf temperature\ng_CO₂::AbstractFloat\nTotal leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\ng_CO₂_b::AbstractFloat\nBoundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\np_CO₂_i::AbstractFloat\nLeaf internal CO₂ partial pressure [Pa]\np_CO₂_s::AbstractFloat\nLeaf surface CO₂ partial pressure [Pa]\np_H₂O_sat::AbstractFloat\nSaturation H₂O vapor pressure, need to update with temperature and leaf water pressure [Pa]\n_t::AbstractFloat\nLast leaf temperature. If different from t, then make temperature correction\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Leaf-Union{Tuple{String}, Tuple{FT}, Tuple{String, ClimaCache.WaveLengthSet{FT}}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Leaf","text":"Leaf{FT}(psm::String, wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); colimit::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for Leaf, given\n\npsm Photosynthesis model type, must be C3, C3Cytochrome, or C4\nwls WaveLengthSet type structure that determines the dimensions of leaf parameters\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nleaf_c3 = Leaf{Float64}(\"C3\");\nleaf_c4 = Leaf{Float64}(\"C4\");\nleaf_cy = Leaf{Float64}(\"C3Cytochrome\");\nleaf_c3 = Leaf{Float64}(\"C3\"; colimit = true);\nleaf_c4 = Leaf{Float64}(\"C4\"; colimit = true);\nleaf_cy = Leaf{Float64}(\"C3Cytochrome\"; colimit = true);\nwls = WaveLengthSet{FT}(collect(400:10:2500));\nleaf_c3 = Leaf{Float64}(\"C3\", wls);\nleaf_c4 = Leaf{Float64}(\"C4\", wls);\nleaf_cy = Leaf{Float64}(\"C3Cytochrome\", wls);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.LeafBiophysics","page":"API","title":"ClimaCache.LeafBiophysics","text":"mutable struct LeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nMESOPHYLL_N::AbstractFloat\nLeaf mesophyll structural parameter that describes mesophyll reflectance and transmittance\nNDUB::Int64\nDoubling adding layers\nant::AbstractFloat\nAnthocyanin content [μg cm⁻²]\nbrown::AbstractFloat\nSenescent material (brown pigments) fraction [-]\ncab::AbstractFloat\nChlorophyll a and b content [μg cm⁻²]\ncar::AbstractFloat\nCarotenoid content [μg cm⁻²]\ncbc::AbstractFloat\nCarbon-based constituents in lma [g cm⁻²]\nf_zeax::AbstractFloat\nZeaxanthin fraction in Carotenoid (1=all Zeaxanthin, 0=all Violaxanthin) [-]\nl_H₂O::AbstractFloat\nEquivalent water thickness [cm]\nlma::AbstractFloat\nDry matter content (dry leaf mass per unit area) [g cm⁻²]\npro::AbstractFloat\nProtein content in lma (pro = lma - cbc) [g cm⁻²]\nk_all::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of all materials\nmat_b::Matrix{FT} where FT<:AbstractFloat\nFluorescence excitation matrix backwards [-]\nmat_f::Matrix{FT} where FT<:AbstractFloat\nFluorescence excitation matrix forwards [-]\nα_cab::Vector{FT} where FT<:AbstractFloat\nRelative absorption by Chlorophyll [-]\nα_cabcar::Vector{FT} where FT<:AbstractFloat\nRelative absorption by Chlorophyll+Carotenoid [-]\nα_SW::Vector{FT} where FT<:AbstractFloat\nShortwave absorption, 1 .- ρSW .- τSW  [-]\nρ_LW::AbstractFloat\nBroadband thermal reflectance, related to blackbody emittance [-]\nρ_SW::Vector{FT} where FT<:AbstractFloat\nShortwave leaf reflectance [-]\nτ_LW::AbstractFloat\nBroadband thermal transmission, related to blackbody emittance [-]\nτ_SW::Vector{FT} where FT<:AbstractFloat\nShortwave leaf transmission [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafBiophysics-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.LeafBiophysics","text":"LeafBiophysics{FT}(wls::WaveLengthSet{FT} = WaveLengthSet{FT}()) where {FT<:AbstractFloat}\n\nConstructor for LeafBiophysics, given\n\nwls WaveLengthSet type structure\n\n\n\nExamples\n\nlbio = LeafBiophysics{Float64}();\nlbio = LeafBiophysics{Float64}(WaveLengthSet{Float64}(collect(400:50:2400)));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.VanDerTolFluorescenceModel","page":"API","title":"ClimaCache.VanDerTolFluorescenceModel","text":"struct VanDerTolFluorescenceModel{FT<:AbstractFloat}\n\nStructure that stores van der Tol et al. (2014) fluorescence model parameters.\n\nFields\n\nK_0::AbstractFloat\nFitting parameter K_0\nK_A::AbstractFloat\nFitting parameter α\nK_B::AbstractFloat\nFitting parameter β\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanDerTolFluorescenceModel-Union{Tuple{}, Tuple{Bool}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanDerTolFluorescenceModel","text":"VanDerTolFluorescenceModel{FT}(drought::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for VanDerTolFluorescenceModel fluorescence model, given\n\ndrought If true, use parameters trained from drought stressed plant. Default is true.\n\n\n\nExamples\n\nvdt = VanDerTolFluorescenceModel{Float64}();\nvdt = VanDerTolFluorescenceModel{Float64}(false);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractReactionCenter","page":"API","title":"ClimaCache.AbstractReactionCenter","text":"abstract type AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nHierarchy of the AbstractReactionCenter\n\nVJPReactionCenter\nCytochromeReactionCenter\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VJPReactionCenter","page":"API","title":"ClimaCache.VJPReactionCenter","text":"mutable struct VJPReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSII::AbstractFloat\nFraction of absorbed light used by PSII ETR\nFLM::ClimaCache.VanDerTolFluorescenceModel\nFluorescence model\nK_D::AbstractFloat\nRate constant for thermal dissipation\nK_F::AbstractFloat\nRate constant for fluorescence\nK_P_MAX::AbstractFloat\nMaximal rate constant for photochemistry\nΦ_PSII_MAX::AbstractFloat\nmax PSII yield (knpqr=0, all RC open)\nk_npq_rev::AbstractFloat\nReversible NPQ rate constant (initially zero)\nk_npq_sus::AbstractFloat\nSustained NPQ rate constant (for seasonal changes, default is zero)\nk_p::AbstractFloat\nRate constant for photochemistry\nnpq::AbstractFloat\nNon-Photochemical quenching\nϕ_f::AbstractFloat\nFluorescence yield\nϕ_p::AbstractFloat\nPhotochemical yield\nf_m::AbstractFloat\nDark adapted yield (Kp=0)\nf_m′::AbstractFloat\nLight adapted yield (Kp=0)\nf_o::AbstractFloat\nDark-adapted fluorescence yield (Kp=max)\nf_o′::AbstractFloat\nLight-adapted fluorescence yield in the dark (Kp=max)\nq_e::AbstractFloat\nEnergy quenching\nq_p::AbstractFloat\nPhotochemical quenching\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VJPReactionCenter-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VJPReactionCenter","text":"VJPReactionCenter{FT}() where {FT<:AbstractFloat}\n\nConstructor of VJPReactionCenter\n\n\n\nExamples\n\nrc = VJPReactionCenter{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.CytochromeReactionCenter","page":"API","title":"ClimaCache.CytochromeReactionCenter","text":"mutable struct CytochromeReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSI::AbstractFloat\nFraction of absorbed light used by PSI ETR\nK_D::AbstractFloat\nRate constant of consititutive heat loss from the antennae [ns⁻¹]\nK_F::AbstractFloat\nRate constant of fluorescence [ns⁻¹]\nK_PSI::AbstractFloat\nRate constant of photochemistry for PS I [ns⁻¹]\nK_PSII::AbstractFloat\nRate constant of photochemistry for PS II [ns⁻¹]\nK_U::AbstractFloat\nRate constant of excitation sharing for PS II [ns⁻¹]\nK_X::AbstractFloat\nRate constant of regulated heat loss via oxidized PS I center [s⁻¹]\nΦ_PSI_MAX::AbstractFloat\nMaximal PS I photochemical yield\nϵ_1::AbstractFloat\nWeight factor that PSI fluorescence reaches sensor (after reabsorption)\nϵ_2::AbstractFloat\nWeight factor that PSII fluorescence reaches sensor (after reabsorption)\nϕ_f::AbstractFloat\nFluorescence yield\nϕ_p::AbstractFloat\nPhotochemical yield\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.CytochromeReactionCenter-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.CytochromeReactionCenter","text":"CytochromeReactionCenter{FT}() where {FT<:AbstractFloat}\n\nConstructor of CytochromeReactionCenter\n\n\n\nExamples\n\nrc = CytochromeReactionCenter{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractPhotosynthesisModel","page":"API","title":"ClimaCache.AbstractPhotosynthesisModel","text":"abstract type AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nHierarchy of AbstractPhotosynthesisModel:\n\nC3CytochromeModel\nC3VJPModel\nC4VJPModel\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3CytochromeModel","page":"API","title":"ClimaCache.C3CytochromeModel","text":"mutable struct C3CytochromeModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 Cytochrome photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for Ac and Aj => Ai\nCOLIMIT_IP::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for Ai and Ap => Ag\nCOLIMIT_J::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for J\nEFF_1::AbstractFloat\nCoefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEFF_2::AbstractFloat\nCoefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\nTD_KC::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Kc temperature dependency\nTD_KO::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Ko temperature dependency\nTD_KQ::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Kq temperature dependency\nTD_R::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type respiration temperature dependency\nTD_VCMAX::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Vcmax temperature dependency\nTD_Γ::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Γ* temperature dependency\nTD_ΗC::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Η_C temperature dependency\nTD_ΗL::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Η_L temperature dependency\nb₆f::AbstractFloat\nTotal concentration of Cytochrome b₆f [μmol m⁻²]\nr_d25::AbstractFloat\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25::AbstractFloat\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25_ww::AbstractFloat\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\na_c::AbstractFloat\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\na_gross::AbstractFloat\nGross photosynthetic rate [μmol m⁻² s⁻¹]\na_j::AbstractFloat\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\na_net::AbstractFloat\nNet photosynthetic rate [μmol m⁻² s⁻¹]\na_p::AbstractFloat\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\ne_to_c::AbstractFloat\nElectron to CO₂ coefficient\nj_pot::AbstractFloat\nPotential Electron Transport Rate [μmol e⁻ m⁻² s⁻¹]\nj_psi::AbstractFloat\nPSI electron transport rate after colimitation\nk_c::AbstractFloat\nRubisCO coefficient Kc [Pa]\nk_m::AbstractFloat\nMichaelis-Menten's coefficient [Pa]\nk_o::AbstractFloat\nRubisCO coefficient Ko [Pa]\nk_q::AbstractFloat\nMaximal turnover rate of Cytochrome b₆f [e⁻ s⁻¹]\nr_d::AbstractFloat\nRespiration rate at leaf temperature [μmol m⁻² s⁻¹]\nv_cmax::AbstractFloat\nMaximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\nv_qmax::AbstractFloat\nMaximal Cytochrome b₆f activity [μmol e⁻ m⁻² s⁻¹]\nη::AbstractFloat\nratio between JP700 and JP680\nη_c::AbstractFloat\nCoupling efficiency of cyclic electron flow [mol ATP mol⁻¹ e⁻]\nη_l::AbstractFloat\nCoupling efficiency of linear electron flow [mol ATP mol⁻¹ e⁻]\nγ_star::AbstractFloat\nCO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3CytochromeModel-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C3CytochromeModel","text":"C3CytochromeModel{FT}(; v_cmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\n\nConstructor for C3CytochromeModel, given\n\nv_cmax25 Maximal carboxylation rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\ncolimit If true, use quadratic colimitations for ac, aj, and a_p\n\n\n\nExamples\n\ncy = C3CytochromeModel{Float64}();\ncy = C3CytochromeModel{Float64}(v_cmax25 = 30, r_d25 = 1, colimit = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.C3VJPModel","page":"API","title":"ClimaCache.C3VJPModel","text":"mutable struct C3VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for Ac and Aj => Ai\nCOLIMIT_IP::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for Ai and Ap => Ag\nCOLIMIT_J::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for J\nEFF_1::AbstractFloat\nCoefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEFF_2::AbstractFloat\nCoefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\nTD_JMAX::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Jmax temperature dependency\nTD_KC::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Kc temperature dependency\nTD_KO::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Ko temperature dependency\nTD_R::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type respiration temperature dependency\nTD_VCMAX::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Vcmax temperature dependency\nTD_Γ::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Γ* temperature dependency\nj_max25::AbstractFloat\nMaximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\nr_d25::AbstractFloat\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25::AbstractFloat\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25_ww::AbstractFloat\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\na_c::AbstractFloat\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\na_gross::AbstractFloat\nGross photosynthetic rate [μmol m⁻² s⁻¹]\na_j::AbstractFloat\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\na_net::AbstractFloat\nNet photosynthetic rate [μmol m⁻² s⁻¹]\na_p::AbstractFloat\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\ne_to_c::AbstractFloat\nElectron to CO₂ coefficient\nj::AbstractFloat\nElectron transport [μmol m⁻² s⁻¹]\nj_max::AbstractFloat\nMaximal electron transport rate at leaf temperature [μmol m⁻² s⁻¹]\nj_pot::AbstractFloat\nPotential Electron Transport Rate [μmol m⁻² s⁻¹]\nk_c::AbstractFloat\nRubisCO coefficient Kc [Pa]\nk_m::AbstractFloat\nMichaelis-Menten's coefficient [Pa]\nk_o::AbstractFloat\nRubisCO coefficient Ko [Pa]\nr_d::AbstractFloat\nRespiration rate at leaf temperature [μmol m⁻² s⁻¹]\nv_cmax::AbstractFloat\nMaximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\nγ_star::AbstractFloat\nCO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3VJPModel-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C3VJPModel","text":"C3VJPModel{FT}(; v_cmax25::Number = 50, j_max25::Number = 83.5, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\n\nConstructor for C3VJPModel, given\n\nv_cmax25 Maximal carboxylation rate at 298.15 K\nj_max25 Maximal electron transport rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\ncolimit If true, use quadratic colimitations for j and ac, aj, and a_p\n\n\n\nExamples\n\nc3 = C3VJPModel{Float64}();\nc3 = C3VJPModel{Float64}(v_cmax25 = 30, j_max25 = 50, r_d25 = 1, colimit = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.C4VJPModel","page":"API","title":"ClimaCache.C4VJPModel","text":"mutable struct C4VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C4 photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for Ac and Aj => Ai\nCOLIMIT_IP::ClimaCache.AbstractColimit\nAbstractColimit type colimitation method for Ai and Ap => Ag\nTD_KPEP::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Kpep temperature dependency\nTD_R::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type  respiration temperature dependency\nTD_VCMAX::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Vcmax temperature dependency\nTD_VPMAX::ClimaCache.AbstractTemperatureDependency\nAbstractTemperatureDependency type Vpmax temperature dependency\nr_d25::AbstractFloat\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25::AbstractFloat\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25_ww::AbstractFloat\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_pmax25::AbstractFloat\nMaximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\na_c::AbstractFloat\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\na_gross::AbstractFloat\nGross photosynthetic rate [μmol m⁻² s⁻¹]\na_j::AbstractFloat\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\na_net::AbstractFloat\nNet photosynthetic rate [μmol m⁻² s⁻¹]\na_p::AbstractFloat\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\ne_to_c::AbstractFloat\nElectron to CO₂ coefficient\nj_pot::AbstractFloat\nPotential Electron Transport Rate [μmol m⁻² s⁻¹]\nk_pep::AbstractFloat\nPEP coefficient Kpep [Pa]\nr_d::AbstractFloat\nRespiration rate at leaf temperature [μmol m⁻² s⁻¹]\nv_cmax::AbstractFloat\nMaximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\nv_pmax::AbstractFloat\nMaximal PEP carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C4VJPModel-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C4VJPModel","text":"C4VJPModel{FT}(; v_cmax25::Number = 50, v_pmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\n\nConstructor for C4VJPModel, given\n\nv_cmax25 Maximal carboxylation rate at 298.15 K\nv_pmax25 Maximal PEP carboxylation rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\ncolimit If true, use quadratic colimitations for ac, aj, and a_p\n\n\n\nExamples\n\nc4 = C4VJPModel{Float64}();\nc4 = C4VJPModel{Float64}(v_cmax25 = 30, v_pmax25 = 40, r_d25 = 1, colimit = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractPhotosynthesisMode","page":"API","title":"ClimaCache.AbstractPhotosynthesisMode","text":"abstract type AbstractPhotosynthesisMode\n\nHierarchy of AbstractSoilVC:\n\nGCO₂Mode\nPCO₂Mode\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.GCO₂Mode","page":"API","title":"ClimaCache.GCO₂Mode","text":"struct GCO₂Mode <: ClimaCache.AbstractPhotosynthesisMode\n\nAn empty structure to signal the function to calculate photosynthetic rates based on leaf diffusive conductance to CO₂.\n\n\n\nExamples\n\nmode = GCO₂Mode();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.PCO₂Mode","page":"API","title":"ClimaCache.PCO₂Mode","text":"struct PCO₂Mode <: ClimaCache.AbstractPhotosynthesisMode\n\nAn empty structure to signal the function to calculate photosynthetic rates based on CO₂ partial pressure.\n\n\n\nExamples\n\nmode = PCO₂Mode();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractColimit","page":"API","title":"ClimaCache.AbstractColimit","text":"abstract type AbstractColimit{FT<:AbstractFloat}\n\nHierarchy of AbstractColimit\n\nMinimumColimit\nQuadraticColimit\nSerialColimit\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MinimumColimit","page":"API","title":"ClimaCache.MinimumColimit","text":"struct MinimumColimit{FT<:AbstractFloat} <: ClimaCache.AbstractColimit{FT<:AbstractFloat}\n\nEmpty structure to indicate minimum colimitation.\n\n\n\nExamples\n\ncol = MinimumColimit{Float64}();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.QuadraticColimit","page":"API","title":"ClimaCache.QuadraticColimit","text":"mutable struct QuadraticColimit{FT<:AbstractFloat} <: ClimaCache.AbstractColimit{FT<:AbstractFloat}\n\nStructure to indicate quadratic colimitation.\n\nFields\n\nCURVATURE::AbstractFloat\nCurvature factor\n\n\n\nExamples\n\ncol = QuadraticColimit{Float64}(0.98);\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SerialColimit","page":"API","title":"ClimaCache.SerialColimit","text":"struct SerialColimit{FT<:AbstractFloat} <: ClimaCache.AbstractColimit{FT<:AbstractFloat}\n\nEmpty structure to indicate serial colimitation.\n\n\n\nExamples\n\ncol = SerialColimit{Float64}();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractTemperatureDependency","page":"API","title":"ClimaCache.AbstractTemperatureDependency","text":"abstract type AbstractTemperatureDependency{FT<:AbstractFloat}\n\nHierarchy of AbstractTemperatureDependency:\n\nArrhenius\nArrheniusPeak\nQ10\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Arrhenius","page":"API","title":"ClimaCache.Arrhenius","text":"mutable struct Arrhenius{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn Arrhenius type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n\nFields\n\nT_REF::AbstractFloat\nReference temperature [K]\nVAL_REF::AbstractFloat\nUncorrected vakye at reference temperature\nΔHA::AbstractFloat\nActivation energy\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.ArrheniusPeak","page":"API","title":"ClimaCache.ArrheniusPeak","text":"mutable struct ArrheniusPeak{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn ArrheniusPeak type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n          cdot dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n                         1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nT_REF::AbstractFloat\nReference temperature [K]\nVAL_REF::AbstractFloat\nUncorrected vakye at reference temperature\nΔHA::AbstractFloat\nActivation energy\nΔHD::AbstractFloat\nDeactivation energy\nΔSV::AbstractFloat\nEntropy factor\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Q10","page":"API","title":"ClimaCache.Q10","text":"mutable struct Q10{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn Q10 type struct using\n\nY_1 = Y_0 cdot Q_10 ^ dfracT_1 - T_010\n\nFields\n\nT_REF::AbstractFloat\nReference temperature [K]\nVAL_REF::AbstractFloat\nUncorrected vakye at reference temperature\nQ_10::AbstractFloat\nPower of Q10 correction\n\n\n\n\n\n","category":"type"},{"location":"API/#Radiation","page":"API","title":"Radiation","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"WaveLengthSet\nWaveLengthSet{FT}(swl::Vector = WAVELENGTHS; opti::String = OPTI_2021) where {FT<:AbstractFloat}\nHyperspectralRadiation\nHyperspectralRadiation{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); file::String = FILE_SUN) where {FT<:AbstractFloat}\nHyperspectralAbsorption\nHyperspectralAbsorption{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); opti::String = OPTI_2021) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.WaveLengthSet","page":"API","title":"ClimaCache.WaveLengthSet","text":"mutable struct WaveLengthSet{FT<:AbstractFloat}\n\nStructure that stores wave length information.\n\nFields\n\nIΛ_NIR::Vector{Int64}\nIndicies of Λ_NIR in Λ\nIΛ_PAR::Vector{Int64}\nIndicies of Λ_PAR in Λ\nIΛ_SIF::Vector{Int64}\nIndicies of Λ_SIF in Λ\nIΛ_SIFE::Vector{Int64}\nIndicies of Λ_SIFE in Λ\nNΛ::Int64\nNumber of wavelength bins\nNΛ_PAR::Int64\nNumber of wavelength bins for PAR\nNΛ_SIF::Int64\nNumber of wavelength bins for SIF\nNΛ_SIFE::Int64\nNumber of wavelength bins for SIF excitation\nWL_NIR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for NIR [nm]\nWL_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for PAR [nm]\nWL_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF emission [nm]\nWL_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF excitation [nm]\nSΛ::Vector{FT} where FT<:AbstractFloat\nStandard wavelength (boundaries) [nm]\nΔΛ::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength [nm]\nΔΛ_PAR::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for PAR [nm]\nΔΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for SIF excitation [nm]\nΛ::Vector{FT} where FT<:AbstractFloat\nWavelength (bins) [nm]\nΛ_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength bins for PAR [nm]\nΛ_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF [nm]\nΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF excitation [nm]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WaveLengthSet-Union{Tuple{}, Tuple{Vector}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.WaveLengthSet","text":"WaveLengthSet{FT}(swl::Vector = WAVELENGTHS; opti::String = OPTI_2021) where {FT<:AbstractFloat}\n\nConstructor for WaveLengthSet, given\n\nswl Standard wave length boundaries [nm], default is ClimaCache.WAVELENGTHS\nopti Optical properties file path, default is ClimaCache.OPTI_2021\n\n\n\nExamples\n\nwls = WaveLengthSet{Float64}();\nwls = WaveLengthSet{Float64}(collect(400:5:2500));\nwls = WaveLengthSet{Float64}(collect(400:5:2500); opti=ClimaCache.OPTI_2017);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralRadiation","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"mutable struct HyperspectralRadiation{FT<:AbstractFloat}\n\nStructure that stores hyperspectral radiation information\n\nFields\n\ne_direct::Vector{FT} where FT<:AbstractFloat\nDirect radiation [mW m⁻² nm⁻¹]\ne_diffuse::Vector{FT} where FT<:AbstractFloat\nDiffuse radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralRadiation-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"HyperspectralRadiation{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); file::String = FILE_SUN) where {FT<:AbstractFloat}\n\nConstructor for HyperspectralRadiation, given\n\nwls WaveLengthSet type struct that defines wavelength settings\nfile File path to solar radiation setting, default is ClimaCache.FILE_SUN\n\n\n\nExamples\n\nrad = HyperspectralRadiation{FT}();\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)); file = \"\");\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)); file = ClimaCache.FILE_SUN);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralAbsorption","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"mutable struct HyperspectralAbsorption{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nK_ANT::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of anthocynanin [-]\nK_BROWN::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of senescent material (brown pigments) [-]\nK_CAB::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of chlorophyll a and b [-]\nK_CAR_V::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of violaxanthin carotenoid [-]\nK_CAR_Z::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of zeaxanthin carotenoid [-]\nK_CBC::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of carbon-based constituents [-]\nK_H₂O::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of water [-]\nK_LMA::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of dry matter [-]\nK_PRO::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of protein [-]\nK_PS::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of PS I and II [-]\nNR::Vector{FT} where FT<:AbstractFloat\nRefractive index [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralAbsorption-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"HyperspectralAbsorption{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); opti::String = OPTI_2021) where {FT<:AbstractFloat}\n\nConstructor for HyperspectralAbsorption, given\n\nwls WaveLengthSet type structure\nopti Path to leaf optical properties\n\n\n\nExamples\n\nha = HyperspectralAbsorption{FT}();\nha = HyperspectralAbsorption{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\nha = HyperspectralAbsorption{FT}(WaveLengthSet{FT}(collect(400:50:2400)); opti=ClimaCache.OPTI_2017);\n\n\n\n\n\n","category":"method"},{"location":"API/#Soil","page":"API","title":"Soil","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractSoilVC\nBrooksCorey\nVanGenuchten\nVanGenuchten{FT}(name::String, α::Number, n::Number, θ_sat::Number, θ_res::Number) where {FT<:AbstractFloat}\nVanGenuchten{FT}(name::String) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AbstractSoilVC","page":"API","title":"ClimaCache.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BrooksCorey","page":"API","title":"ClimaCache.BrooksCorey","text":"struct BrooksCorey{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nTYPE::String\nSoil type\nB::AbstractFloat\nSoil b\nΨ_SAT::AbstractFloat\nPotential at saturation [MPa]\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten","page":"API","title":"ClimaCache.VanGenuchten","text":"struct VanGenuchten{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nvan Genuchten soil parameters\n\nFields\n\nTYPE::String\nSoil type\nΑ::AbstractFloat\nSoil α is related to the inverse of the air entry suction, α > 0\nN::AbstractFloat\nSoil n is Measure of the pore-size distribution\nM::AbstractFloat\nSoil m = 1 - 1/n\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{FT}, Tuple{String, Number, Number, Number, Number}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String, α::Number, n::Number, θ_sat::Number, θ_res::Number) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name\nα van Genuchten α\nn van Genuchten n\nθ_sat Saturated soil volumetric water content\nθ_res Residual soil volumetric water content\n\n\n\nExamples\n\nvg = VanGenuchten{FT}(\"Test\", FT(100), FT(2), FT(0.5), FT(0.1));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name, need to be Sand, Loamy Sand, Sandy Loam, Loam, Sandy Clay Loam, Silt Loam, Silt (default), Clay Loam, Silty Clay Loam, Sandy Clay, Silty Clay, and Clay.\n\n\n\nExamples\n\nvg = VanGenuchten{FT}(\"\");\nvg = VanGenuchten{FT}(\"Loam\");\n\n\n\n\n\n","category":"method"},{"location":"API/#SPAC","page":"API","title":"SPAC","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Root\nRoot{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\nStem\nStem{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\nAbstractSPACSystem\nMonoElementSPAC\nMonoElementSPAC{FT}(psm::String) where {FT<:AbstractFloat}\nMonoGrassSPAC\nMonoGrassSPAC{FT}(psm::String; zr::Number = -0.2, zc::Number = 0.5, zss::Vector = collect(0:-0.1:-1), zas::Vector = collect(0:0.05:1), ssm::Bool = true) where {FT<:AbstractFloat}\nMonoPalmSPAC\nMonoPalmSPAC{FT}(psm::String; zr::Number = -1, zt::Number = 10, zc::Number = 12, zss::Vector = collect(0:-0.25:-2), zas::Vector = collect(0:0.2:13), ssm::Bool = true) where {FT<:AbstractFloat}\nMonoTreeSPAC\nMonoTreeSPAC{FT}(psm::String; zr::Number = -1, zt::Number = 10, zc::Number = 12, zss::Vector = collect(0:-0.25:-2), zas::Vector = collect(0:0.2:13), ssm::Bool = true) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.Root","page":"API","title":"ClimaCache.Root","text":"mutable struct Root{FT<:AbstractFloat}\n\nStructure to save root parameters\n\nFields\n\nHS::ClimaCache.RootHydraulics{FT} where FT<:AbstractFloat\nRootHydraulics type root hydraulic system\nt::AbstractFloat\nCurrent temperature\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Root-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Root","text":"Root{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a Root structure, given\n\nssm Whether the flow rate is at steady state\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.Stem","page":"API","title":"ClimaCache.Stem","text":"mutable struct Stem{FT<:AbstractFloat}\n\nStructure to save stem parameters\n\nFields\n\nHS::ClimaCache.StemHydraulics{FT} where FT<:AbstractFloat\nStemHydraulics type stem hydraulic system\nt::AbstractFloat\nCurrent temperature\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Stem-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Stem","text":"Stem{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a Stem structure, given\n\nssm Whether the flow rate is at steady state\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractSPACSystem","page":"API","title":"ClimaCache.AbstractSPACSystem","text":"abstract type AbstractSPACSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractSPACSystem:\n\nMonoElementSPAC\nMonoGrassSPAC\nMonoPalmSPAC\nMonoTreeSPAC\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoElementSPAC","page":"API","title":"ClimaCache.MonoElementSPAC","text":"mutable struct MonoElementSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for simplest SPAC system\n\nFields\n\nLEAF::ClimaCache.Leaf{FT} where FT\nLeaf system\nROOT::ClimaCache.Root{FT} where FT\nRoot system\nSTEM::ClimaCache.Stem{FT} where FT\nStem system\n_krs::Vector\nRelative hydraulic conductance\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoElementSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoElementSPAC","text":"MonoElementSPAC{FT}(psm::String; ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a MonoElementSPAC type toy SPAC system, given\n\npsm Photosynthesis model, must be C3, C4, or C3Cytochrome\nssm Whether the flow rate is at steady state\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.MonoGrassSPAC","page":"API","title":"ClimaCache.MonoGrassSPAC","text":"mutable struct MonoGrassSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for monospecies grass SPAC system\n\nFields\n\nLEAVES::Array{ClimaCache.Leaf{FT}, 1} where FT\nLeaf hydrualic system\nLEAVES_INDEX::Vector{Int64}\nCorresponding air layer per canopy layer\nN_CANOPY::Int64\nNumber of canopy layers\nN_ROOT::Int64\nNumber of root layers\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT\nRoot hydraulic system\nROOTS_INDEX::Vector{Int64}\nCorresponding soil layer per root layer\n_fs::Vector\nFlow rate per root layer\n_ks::Vector\nConductances for each root layer at given flow\n_ps::Vector\nPressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoGrassSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoGrassSPAC","text":"MonoGrassSPAC{FT}(psm::String; zr::Number = -0.2, zc::Number = 0.5, zss::Vector = collect(0:-0.1:-1), zas::Vector = collect(0:0.05:1), ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a SPAC system for monospecies grass system, given\n\npsm Photosynthesis model, must be C3, C4, or C3Cytochrome\nzr Maximal root depth (negative value)\nzc Maximal canopy height (positive value)\nzss Vector of soil layer boundaries starting from 0\nzas Vector of air layer boundaries starting from 0\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nspac = MonoGrassSPAC{Float64}();\nspac = MonoGrassSPAC{Float64}(zr = -0.3, zc = 1, zss = collect(0:-0.1:-1), zas = collect(0:0.05:1.01));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.MonoPalmSPAC","page":"API","title":"ClimaCache.MonoPalmSPAC","text":"mutable struct MonoPalmSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for monospecies palm SPAC system (with trunk)\n\nFields\n\nLEAVES::Array{ClimaCache.Leaf{FT}, 1} where FT\nLeaf hydrualic system\nLEAVES_INDEX::Vector{Int64}\nCorresponding air layer per canopy layer\nN_CANOPY::Int64\nNumber of canopy layers\nN_ROOT::Int64\nNumber of root layers\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT\nRoot hydraulic system\nROOTS_INDEX::Vector{Int64}\nCorresponding soil layer per root layer\nTRUNK::ClimaCache.Stem{FT} where FT\nTrunk hydraulic system\n_fs::Vector\nFlow rate per root layer\n_ks::Vector\nConductances for each root layer at given flow\n_ps::Vector\nPressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoPalmSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoPalmSPAC","text":"MonoPalmSPAC{FT}(psm::String; zr::Number = -1, zt::Number = 10, zc::Number = 12, zss::Vector = collect(0:-0.25:-2), zas::Vector = collect(0:0.2:13), ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a SPAC system for monospecies palm system, given\n\npsm Photosynthesis model, must be C3 or C3Cytochrome\nzr Maximal root depth (negative value)\nzc Maximal canopy height (positive value)\nzss Vector of soil layer boundaries starting from 0\nzas Vector of air layer boundaries starting from 0\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nspac = MonoPalmSPAC{Float64}();\nspac = MonoPalmSPAC{Float64}(zr = -1, zt = 11, zc = 1, zss = collect(0:-0.1:-2), zas = collect(0:0.2:13));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.MonoTreeSPAC","page":"API","title":"ClimaCache.MonoTreeSPAC","text":"mutable struct MonoTreeSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for monospecies tree SPAC system (with trunk and branches)\n\nFields\n\nBRANCHES::Array{ClimaCache.Stem{FT}, 1} where FT\nBranch hydraulic system\nLEAVES::Array{ClimaCache.Leaf{FT}, 1} where FT\nLeaf hydrualic system\nLEAVES_INDEX::Vector{Int64}\nCorresponding air layer per canopy layer\nN_CANOPY::Int64\nNumber of canopy layers\nN_ROOT::Int64\nNumber of root layers\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT\nRoot hydraulic system\nROOTS_INDEX::Vector{Int64}\nCorresponding soil layer per root layer\nTRUNK::ClimaCache.Stem{FT} where FT\nTrunk hydraulic system\n_fs::Vector\nFlow rate per root layer\n_ks::Vector\nConductances for each root layer at given flow\n_ps::Vector\nPressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoTreeSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoTreeSPAC","text":"MonoTreeSPAC{FT}(psm::String; zr::Number = -1, zt::Number = 10, zc::Number = 12, zss::Vector = collect(0:-0.25:-2), zas::Vector = collect(0:0.2:13), ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a SPAC system for monospecies tree system, given\n\npsm Photosynthesis model, must be C3, C4, or C3Cytochrome (note: there are C4 shrubs)\nzr Maximal root depth (negative value)\nzc Maximal canopy height (positive value)\nzss Vector of soil layer boundaries starting from 0\nzas Vector of air layer boundaries starting from 0\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nspac = MonoTreeSPAC{Float64}();\nspac = MonoTreeSPAC{Float64}(zr = -1, zt = 11, zc = 1, zss = collect(0:-0.1:-2), zas = collect(0:0.2:13));\n\n\n\n\n\n","category":"method"}]
}
