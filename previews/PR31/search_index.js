var documenterSearchIndex = {"docs":
[{"location":"#ClimaCache.jl","page":"Home","title":"ClimaCache.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cache system for CliMA Land model.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(\"ClimaCache\");","category":"page"},{"location":"API/#ClimaCache","page":"API","title":"ClimaCache","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = ClimaCache","category":"page"},{"location":"API/#Environmental-Conditions","page":"API","title":"Environmental Conditions","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AirLayer\nMeteorology\nAbstractSoilVC\nBrooksCorey\nVanGenuchten\nVanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\nAbstractSoilAlbedo\nBroadbandSoilAlbedo\nHyperspectralSoilAlbedo\nSoilLayer\nSoil","category":"page"},{"location":"API/#ClimaCache.AirLayer","page":"API","title":"ClimaCache.AirLayer","text":"mutable struct AirLayer{FT<:AbstractFloat}\n\nStructure that stores air layer information\n\nFields\n\nZ::AbstractFloat\n\n: Mean height of the layer [m]\n\nΔZ::AbstractFloat\n\n: Layer thickness [m]\n\nP_AIR::AbstractFloat\n\n: Atmospheric pressure [Pa]\n\np_CO₂::AbstractFloat\n\n: CO₂ partial pressure [Pa]\n\np_H₂O::AbstractFloat\n\n: H₂O partial pressure [Pa]\n\nt::AbstractFloat\n\n: Temperature [K]\n\nwind::AbstractFloat\n\n: Wind speed [m s⁻¹]\n\ne::AbstractFloat\n\n: Total energy within the air layer [J m⁻²]\n\nn_CO₂::AbstractFloat\n\n: Mole of CO₂ per surface area [mol m⁻²]\n\nn_H₂O::AbstractFloat\n\n: Mole of H₂O per surface area [mol m⁻²]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in total energy [J m⁻² s⁻¹]\n\n∂CO₂∂t::AbstractFloat\n\n: Marginal increase in total moles of CO₂ [mol m⁻² s⁻¹]\n\n∂H₂O∂t::AbstractFloat\n\n: Marginal increase in total moles of H₂O [mol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Meteorology","page":"API","title":"ClimaCache.Meteorology","text":"mutable struct Meteorology{FT<:AbstractFloat}\n\nStructure that stores meteorological information\n\nFields\n\nrain::AbstractFloat\n\n: Precipitation in form of rain (before interception) [mol m⁻²]\n\nsnow::AbstractFloat\n\n: Precipitation in form of snow (before interception) [mol m⁻²]\n\nt_air::AbstractFloat\n\n: Air temperature as the boundary condition for canopy airspace [K]\n\nt_precip::AbstractFloat\n\n: Precipitation temperature [K]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractSoilVC","page":"API","title":"ClimaCache.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BrooksCorey","page":"API","title":"ClimaCache.BrooksCorey","text":"mutable struct BrooksCorey{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nK_MAX::AbstractFloat\n\n: Maximum soil hydraulic conductivity at 25 °C [mol m⁻¹ s⁻¹ MPa⁻¹]\n\nB::AbstractFloat\n\n: Soil b\n\nTYPE::String\n\n: Soil type\n\nΨ_SAT::AbstractFloat\n\n: Potential at saturation [MPa]\n\nΘ_SAT::AbstractFloat\n\n: Saturated soil volumetric water content\n\nΘ_RES::AbstractFloat\n\n: Residual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten","page":"API","title":"ClimaCache.VanGenuchten","text":"mutable struct VanGenuchten{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nvan Genuchten soil parameters\n\nFields\n\nK_MAX::AbstractFloat\n\n: Maximum soil hydraulic conductivity at 25 °C [mol m⁻¹ s⁻¹ MPa⁻¹]\n\nN::AbstractFloat\n\n: Soil n is Measure of the pore-size distribution\n\nTYPE::String\n\n: Soil type\n\nα::AbstractFloat\n\n: Soil α is related to the inverse of the air entry suction, α > 0\n\nΘ_RES::AbstractFloat\n\n: Residual soil volumetric water content\n\nΘ_SAT::AbstractFloat\n\n: Saturated soil volumetric water content\n\nM::AbstractFloat\n\n: Soil m = 1 - 1/n\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name, need to be Sand, Loamy Sand, Sandy Loam, Loam (default), Sandy Clay Loam, Silt Loam, Silt, Clay Loam, Silty Clay Loam, Sandy Clay, Silty Clay, and Clay.\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractSoilAlbedo","page":"API","title":"ClimaCache.AbstractSoilAlbedo","text":"abstract type AbstractSoilAlbedo{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilAlbedo:\n\nBroadbandSoilAlbedo\nHyperspectralSoilAlbedo\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSoilAlbedo","page":"API","title":"ClimaCache.BroadbandSoilAlbedo","text":"mutable struct BroadbandSoilAlbedo{FT<:AbstractFloat} <: ClimaCache.AbstractSoilAlbedo{FT<:AbstractFloat}\n\nStructure for broadband soil albedo\n\nFields\n\nρ_LW::AbstractFloat\n\n: Reflectance for longwave radiation\n\nα_CLM::Bool\n\n: Whether to use CLM soil albedo scheme\n\ne_net_diffuse::AbstractFloat\n\n: Net diffuse radiation at top soil [W m⁻²]\n\ne_net_direct::AbstractFloat\n\n: Net direct radiation at top soil [W m⁻²]\n\nr_net_lw::AbstractFloat\n\n: Net longwave energy absorption [W m⁻²]\n\nr_net_sw::AbstractFloat\n\n: Net shortwave energy absorption [W m⁻²]\n\nρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Reflectance for shortwave radiation (for PAR and NIR)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralSoilAlbedo","page":"API","title":"ClimaCache.HyperspectralSoilAlbedo","text":"mutable struct HyperspectralSoilAlbedo{FT<:AbstractFloat} <: ClimaCache.AbstractSoilAlbedo{FT<:AbstractFloat}\n\nStructure for hyperspectral soil albedo\n\nFields\n\nDATASET::String\n\n: File path to the Netcdf dataset\n\nDIM_NIR::Int64\n\n: Number of wavelength bins for NIR\n\nDIM_WL::Int64\n\n: Number of wavelength bins\n\nα_CLM::Bool\n\n: Whether to use CLM soil albedo scheme\n\nMAT_ρ::Matrix{FT} where FT<:AbstractFloat\n\n: A matrix of characteristic curves\n\nρ_LW::AbstractFloat\n\n: Reflectance for longwave radiation\n\ne_net_diffuse::Vector{FT} where FT<:AbstractFloat\n\n: Net diffuse radiation at top soil [mW m⁻² nm⁻¹]\n\ne_net_direct::Vector{FT} where FT<:AbstractFloat\n\n: Net direct radiation at top soil [mW m⁻² nm⁻¹]\n\nr_net_lw::AbstractFloat\n\n: Net longwave energy absorption [W m⁻²]\n\nr_net_sw::AbstractFloat\n\n: Net shortwave energy absorption [W m⁻²]\n\nρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Reflectance for shortwave radiation\n\n_tmp_vec_nir::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable with length of NIR\n\n_weight::Vector{FT} where FT<:AbstractFloat\n\n: Weights of the four characteristic curves\n\n_ρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store ρPAR and ρNIR (a segmented curve)\n\n_θ::AbstractFloat\n\n: Last soil moisture used to compute albedo\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SoilLayer","page":"API","title":"ClimaCache.SoilLayer","text":"mutable struct SoilLayer{FT<:AbstractFloat}\n\nStructure for soil layer\n\nFields\n\nCP::AbstractFloat\n\n: Specific heat capacity of soil [J K⁻¹ kg⁻¹]\n\nΛ_THERMAL::AbstractFloat\n\n: Soil thermal conductivity [W m⁻¹ K⁻¹]\n\nρ::AbstractFloat\n\n: Dry soil density [kg m⁻³]\n\nVC::Union{ClimaCache.BrooksCorey{FT}, ClimaCache.VanGenuchten{FT}} where FT<:AbstractFloat\n\n: Soil moisture retention curve\n\nZS::Vector{FT} where FT<:AbstractFloat\n\n: Depth boundaries [m]\n\nZ::AbstractFloat\n\n: Mean depth [m]\n\nΔZ::AbstractFloat\n\n: Layer thickness [m]\n\nt::AbstractFloat\n\n: Temperature [K]\n\ne::AbstractFloat\n\n: Total stored energy per volume [J m⁻³]\n\nθ::AbstractFloat\n\n: Soil water content\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂θ∂t::AbstractFloat\n\n: Marginal increase in soil water content [s⁻¹]\n\nk::AbstractFloat\n\n: Soil hydraulic conductance per area [mol m⁻² s⁻¹ MPa⁻¹]\n\nψ::AbstractFloat\n\n: Matric potential [MPa]\n\n_cp::AbstractFloat\n\n: Combined specific heat capacity of soil [J K⁻¹ kg⁻¹]\n\n_λ_thermal::AbstractFloat\n\n: Combined soil thermal conductance [W m⁻² K⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Soil","page":"API","title":"ClimaCache.Soil","text":"mutable struct Soil{FT<:AbstractFloat}\n\nStructure for Soil\n\nFields\n\nDIM_SOIL::Int64\n\n: Dimension of soil layers\n\nAREA::AbstractFloat\n\n: Total area of the soil [m²]\n\nCOLOR::Int64\n\n: Color class as in CLM\n\nZS::Vector{FT} where FT<:AbstractFloat\n\n: Soil layers boundaries\n\nALBEDO::Union{ClimaCache.BroadbandSoilAlbedo{FT}, ClimaCache.HyperspectralSoilAlbedo{FT}} where FT<:AbstractFloat\n\n: Albedo related structure\n\nLAYERS::Array{ClimaCache.SoilLayer{FT}, 1} where FT<:AbstractFloat\n\n: Soil layers\n\nrunoff::AbstractFloat\n\n: Surface runoff due to heavy precipitation during the time step [mol m⁻²]\n\n_k::Vector{FT} where FT<:AbstractFloat\n\n: Soil hydraulic conductance between layers per area [mol m⁻² s⁻¹ MPa⁻¹]\n\n_q::Vector{FT} where FT<:AbstractFloat\n\n: Flux between layers per area [mol m⁻² s⁻¹]\n\n_q_thermal::Vector{FT} where FT<:AbstractFloat\n\n: Thermal flux between layers per area [mol m⁻² s⁻¹]\n\n_δt::Vector{FT} where FT<:AbstractFloat\n\n: Soil temperature difference between layers [MPa]\n\n_δψ::Vector{FT} where FT<:AbstractFloat\n\n: Soil metric potential difference between layers [MPa]\n\n_λ_thermal::Vector{FT} where FT<:AbstractFloat\n\n: Soil thermal conductance between layers per area [W m⁻² K⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#Plant","page":"API","title":"Plant","text":"","category":"section"},{"location":"API/#Hydraulics","page":"API","title":"Hydraulics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractPVCurve\nLinearPVCurve\nSegmentedPVCurve\nAbstractHydraulicSystem\nAbstractXylemVC\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\nAbstractFlowProfile\nNonSteadyStateFlow\nSteadyStateFlow\nLeafHydraulics\nRootHydraulics\nStemHydraulics","category":"page"},{"location":"API/#ClimaCache.AbstractPVCurve","page":"API","title":"ClimaCache.AbstractPVCurve","text":"abstract type AbstractPVCurve{FT<:AbstractFloat}\n\nHierarchy of AbstractPVCurve:\n\nLinearPVCurve\nSegmentedPVCurve\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LinearPVCurve","page":"API","title":"ClimaCache.LinearPVCurve","text":"mutable struct LinearPVCurve{FT<:AbstractFloat} <: ClimaCache.AbstractPVCurve{FT<:AbstractFloat}\n\nStruct that contains information for linear PV curve\n\nFields\n\nK_REFILL::AbstractFloat\n\n: Conductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\n\nSLOPE::AbstractFloat\n\n: Slope of the linear PV curve (relative to maximum) [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SegmentedPVCurve","page":"API","title":"ClimaCache.SegmentedPVCurve","text":"mutable struct SegmentedPVCurve{FT<:AbstractFloat} <: ClimaCache.AbstractPVCurve{FT<:AbstractFloat}\n\nStruct that contains information for segmented PV curve\n\nFields\n\nC_ALL::AbstractFloat\n\n: n_o / maximum V [mol m⁻³]\n\nK_REFILL::AbstractFloat\n\n: Conductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\n\nRWC_APO::AbstractFloat\n\n: Apoplastic water content relative to maximum water volume\n\nRWC_TLP::AbstractFloat\n\n: Relative water content at turgor loss point\n\nϵ_BULK::AbstractFloat\n\n: Bulk modulus of elasticity [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractHydraulicSystem","page":"API","title":"ClimaCache.AbstractHydraulicSystem","text":"abstract type AbstractHydraulicSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractHydraulicSystem:\n\nLeafHydraulics\nRootHydraulics\nStemHydraulics\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractXylemVC","page":"API","title":"ClimaCache.AbstractXylemVC","text":"abstract type AbstractXylemVC{FT<:AbstractFloat}\n\nHierarchy of AbstractXylemVC:\n\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LogisticVC","page":"API","title":"ClimaCache.LogisticVC","text":"mutable struct LogisticVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nModified logistic function for vulnerability curve\n\nFields\n\nA::AbstractFloat\n\n: Multiplier to exponential component\n\nB::AbstractFloat\n\n: Multiplier to pressure [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.PowerVC","page":"API","title":"ClimaCache.PowerVC","text":"mutable struct PowerVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nPower function for vulnerability curve\n\nFields\n\nA::AbstractFloat\n\n: Multiplier to power component [MPa⁻ᵇ]\n\nB::AbstractFloat\n\n: Power to pressure\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WeibullVC","page":"API","title":"ClimaCache.WeibullVC","text":"mutable struct WeibullVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nWeibull cumulative distribution function for vulnerability curve\n\nFields\n\nB::AbstractFloat\n\n: Numerator in the exponential component [MPa]\n\nC::AbstractFloat\n\n: Power to pressure component\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.ComplexVC","page":"API","title":"ClimaCache.ComplexVC","text":"mutable struct ComplexVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nA complex struct for segmented vulnerability curve such as dual Weibull function\n\nFields\n\nPS::Vector{FT} where FT<:AbstractFloat\n\n: Percentages of each VC component\n\nVCS::Union{Array{ClimaCache.AbstractXylemVC{FT}, 1}, Array{ClimaCache.LogisticVC{FT}, 1}, Array{ClimaCache.PowerVC{FT}, 1}, Array{ClimaCache.WeibullVC{FT}, 1}} where FT<:AbstractFloat\n\n: Vector of vulnerability curve components\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractFlowProfile","page":"API","title":"ClimaCache.AbstractFlowProfile","text":"abstract type AbstractFlowProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractFlowProfile:\n\nNonSteadyStateFlow\nSteadyStateFlow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.NonSteadyStateFlow","page":"API","title":"ClimaCache.NonSteadyStateFlow","text":"mutable struct NonSteadyStateFlow{FT<:AbstractFloat} <: ClimaCache.AbstractFlowProfile{FT<:AbstractFloat}\n\nStruct that contains stem hydraulic system flow rates at non-steady state\n\nFields\n\nDIM_CAPACITY::Int64\n\n: Dimension of capaciatance elements\n\nf_in::AbstractFloat\n\n: Flow rate into the organ [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\nf_out::AbstractFloat\n\n: Flow rate out of the organ [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n_f_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water flow [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n_f_buffer::Vector{FT} where FT<:AbstractFloat\n\n: Vector of buffer water flow [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n_f_sum::Vector{FT} where FT<:AbstractFloat\n\n: Vector of sum buffer water flow [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SteadyStateFlow","page":"API","title":"ClimaCache.SteadyStateFlow","text":"mutable struct SteadyStateFlow{FT<:AbstractFloat} <: ClimaCache.AbstractFlowProfile{FT<:AbstractFloat}\n\nStruct that contains stem hydraulic system flow rates at steady state\n\nFields\n\nflow::AbstractFloat\n\n: Flow rate through the organ [mol s⁻¹] (for root and stem) or [mol m⁻² s⁻¹] (for leaf)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafHydraulics","page":"API","title":"ClimaCache.LeafHydraulics","text":"mutable struct LeafHydraulics{FT<:AbstractFloat} <: ClimaCache.AbstractHydraulicSystem{FT<:AbstractFloat}\n\nStruct that contains leaf hydraulic system\n\nFields\n\nDIM_XYLEM::Int64\n\n: Dimension of xylem slices\n\nAREA::AbstractFloat\n\n: Leaf area [m²]\n\nK_OX::AbstractFloat\n\n: Maximal extra-xylary hydraulic conductance [mol s⁻¹ MPa⁻¹ m⁻²]\n\nK_SLA::AbstractFloat\n\n: Maximal leaf xylem hydraulic conductance per leaf area [mol s⁻¹ MPa⁻¹ m⁻²]\n\nV_MAXIMUM::AbstractFloat\n\n: Total capaciatance at Ψ = 0 [mol m⁻²]\n\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT<:AbstractFloat\n\n: Flow profile\n\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT<:AbstractFloat\n\n: Pressure volume curve for storage\n\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT<:AbstractFloat\n\n: Vulnerability curve\n\np_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\nv_storage::AbstractFloat\n\n: Current capaciatance at Ψ_leaf [mol m⁻²]\n\np_leaf::AbstractFloat\n\n: Leaf end water pressure at air-water interface [MPa]\n\np_ups::AbstractFloat\n\n: Leaf xylem water pressure at the leaf base (upstream) [MPa]\n\n_e_crit::AbstractFloat\n\n: Critical flow rate [mol s⁻¹ m⁻²]\n\n_k_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of leaf kr history per element [-]\n\n_p_dos::AbstractFloat\n\n: Leaf xylem water pressure at the downstream end of leaf xylem [MPa]\n\n_p_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure [MPa]\n\n_p_storage::AbstractFloat\n\n: Pressure of storage\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.RootHydraulics","page":"API","title":"ClimaCache.RootHydraulics","text":"mutable struct RootHydraulics{FT<:AbstractFloat} <: ClimaCache.AbstractHydraulicSystem{FT<:AbstractFloat}\n\nStruct that contains root hydraulic system\n\nFields\n\nDIM_XYLEM::Int64\n\n: Dimension of xylem slices\n\nAREA::AbstractFloat\n\n: Root cross-section area [m²]\n\nK_RHIZ::AbstractFloat\n\n: Rhizosphere  conductance [mol s⁻¹ MPa⁻¹]\n\nK_X::AbstractFloat\n\n: Maximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\n\nL::AbstractFloat\n\n: Length [m]\n\nV_MAXIMUM::Vector{FT} where FT<:AbstractFloat\n\n: Maximal storage per element [mol]\n\nΔH::AbstractFloat\n\n: Root z difference [m]\n\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT<:AbstractFloat\n\n: Flow profile\n\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT<:AbstractFloat\n\n: Pressure volume curve for storage\n\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT<:AbstractFloat\n\n: Vulnerability curve\n\np_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\nv_storage::Vector{FT} where FT<:AbstractFloat\n\n: Storage per element [mol]\n\np_dos::AbstractFloat\n\n: Xylem water pressure at the downstream end of xylem [MPa]\n\np_ups::AbstractFloat\n\n: Soil matrix potential [MPa]\n\nψ_osm::AbstractFloat\n\n: Soil osmotic potential at 298.15 K `[MPa]\n\n_k_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of leaf kr history per element\n\n_p_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure [MPa]\n\n_p_rhiz::AbstractFloat\n\n: Xylem-rhizosphere interface water pressure [MPa]\n\n_p_storage::Vector{FT} where FT<:AbstractFloat\n\n: Pressure of storage per element [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.StemHydraulics","page":"API","title":"ClimaCache.StemHydraulics","text":"mutable struct StemHydraulics{FT<:AbstractFloat} <: ClimaCache.AbstractHydraulicSystem{FT<:AbstractFloat}\n\nStruct that contains stem hydraulic system\n\nFields\n\nDIM_XYLEM::Int64\n\n: Dimension of xylem slices\n\nAREA::AbstractFloat\n\n: Root cross-section area [m²]\n\nK_X::AbstractFloat\n\n: Maximal xylem hydraulic conductivity (per root depth) [mol s⁻¹ MPa⁻¹ m⁻²]\n\nL::AbstractFloat\n\n: Length [m]\n\nV_MAXIMUM::Vector{FT} where FT<:AbstractFloat\n\n: Maximal storage per element [mol]\n\nΔH::AbstractFloat\n\n: Root z difference [m]\n\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT<:AbstractFloat\n\n: Flow profile\n\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT<:AbstractFloat\n\n: Pressure volume curve for storage\n\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT<:AbstractFloat\n\n: Vulnerability curve\n\np_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\nv_storage::Vector{FT} where FT<:AbstractFloat\n\n: Storage per element [mol]\n\np_dos::AbstractFloat\n\n: Xylem water pressure at the downstream end of xylem [MPa]\n\np_ups::AbstractFloat\n\n: Soil matrix potential [MPa]\n\n_k_history::Vector{FT} where FT<:AbstractFloat\n\n: Vector of leaf kr history per element\n\n_p_element::Vector{FT} where FT<:AbstractFloat\n\n: Vector of xylem water pressure [MPa]\n\n_p_storage::Vector{FT} where FT<:AbstractFloat\n\n: Pressure of storage per element\n\n\n\n\n\n","category":"type"},{"location":"API/#Leaf-Level","page":"API","title":"Leaf Level","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractLeafBiophysics\nBroadbandLeafBiophysics\nHyperspectralLeafBiophysics\nVanDerTolFluorescenceModel\nVDTModelAll\nVDTModelDrought\nAbstractReactionCenter\nCytochromeReactionCenter\nVJPReactionCenter\nAbstractPhotosynthesisModel\nC3CytochromeModel\nC3VJPModel\nC4VJPModel\nAbstractPhotosynthesisMode\nGCO₂Mode\nPCO₂Mode\nAbstractTemperatureDependency\nArrhenius\nArrheniusPeak\nQ10\nQ10Peak\nAbstractLeaf\nLeaf\nLeaves1D\nLeaves2D","category":"page"},{"location":"API/#ClimaCache.AbstractLeafBiophysics","page":"API","title":"ClimaCache.AbstractLeafBiophysics","text":"abstract type AbstractLeafBiophysics{FT<:AbstractFloat}\n\nHierarchy of AbstractLeafBiophysics:\n\nBroadbandLeafBiophysics\nHyperspectralLeafBiophysics\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandLeafBiophysics","page":"API","title":"ClimaCache.BroadbandLeafBiophysics","text":"mutable struct BroadbandLeafBiophysics{FT<:AbstractFloat} <: ClimaCache.AbstractLeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nα_NIR::AbstractFloat\n\n: Broadband absorption fraction at the NIR region\n\nα_PAR::AbstractFloat\n\n: Broadband absorption fraction at the PAR region\n\nϵ_LW::AbstractFloat\n\n: Emissivity for longwave radiation\n\nlma::AbstractFloat\n\n: Dry matter content (dry leaf mass per unit area) [g cm⁻²]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralLeafBiophysics","page":"API","title":"ClimaCache.HyperspectralLeafBiophysics","text":"mutable struct HyperspectralLeafBiophysics{FT<:AbstractFloat} <: ClimaCache.AbstractLeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nDIM_SIF::Int64\n\n: Dimension of SIF wave length bins\n\nDIM_SIFE::Int64\n\n: Dimension of SIF excitation wave length bins\n\nDIM_WL::Int64\n\n: Dimension of short wave length bins\n\nMESOPHYLL_N::AbstractFloat\n\n: Leaf mesophyll structural parameter that describes mesophyll reflectance and transmittance\n\nNDUB::Int64\n\n: Doubling adding layers\n\nρ_LW::AbstractFloat\n\n: Broadband thermal reflectance, related to blackbody emittance [-]\n\nτ_LW::AbstractFloat\n\n: Broadband thermal transmission, related to blackbody emittance [-]\n\nant::AbstractFloat\n\n: Anthocyanin content [μg cm⁻²]\n\nbrown::AbstractFloat\n\n: Senescent material (brown pigments) fraction [-]\n\ncab::AbstractFloat\n\n: Chlorophyll a and b content [μg cm⁻²]\n\ncar::AbstractFloat\n\n: Carotenoid content [μg cm⁻²]\n\ncbc::AbstractFloat\n\n: Carbon-based constituents in lma [g cm⁻²]\n\nf_zeax::AbstractFloat\n\n: Zeaxanthin fraction in Carotenoid (1=all Zeaxanthin, 0=all Violaxanthin) [-]\n\nlma::AbstractFloat\n\n: Dry matter content (dry leaf mass per unit area) [g cm⁻²]\n\npro::AbstractFloat\n\n: Protein content in lma (pro = lma - cbc) [g cm⁻²]\n\nk_all::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of all materials\n\nmat_b::Matrix{FT} where FT<:AbstractFloat\n\n: Fluorescence excitation matrix backwards [-]\n\nmat_f::Matrix{FT} where FT<:AbstractFloat\n\n: Fluorescence excitation matrix forwards [-]\n\nα_cab::Vector{FT} where FT<:AbstractFloat\n\n: Relative absorption by Chlorophyll [-]\n\nα_cabcar::Vector{FT} where FT<:AbstractFloat\n\n: Relative absorption by Chlorophyll+Carotenoid [-]\n\nα_sw::Vector{FT} where FT<:AbstractFloat\n\n: Shortwave absorption, 1 .- ρsw .- τsw  [-]\n\nρ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Shortwave leaf reflectance [-]\n\nτ_sw::Vector{FT} where FT<:AbstractFloat\n\n: Shortwave leaf transmission [-]\n\n_v_storage::AbstractFloat\n\n: Leaf water content history used to compute leaf spectra [mol m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanDerTolFluorescenceModel","page":"API","title":"ClimaCache.VanDerTolFluorescenceModel","text":"mutable struct VanDerTolFluorescenceModel{FT<:AbstractFloat}\n\nStructure that stores van der Tol et al. (2014) fluorescence model parameters.\n\nFields\n\nK_0::AbstractFloat\n\n: Fitting parameter K_0\n\nK_A::AbstractFloat\n\n: Fitting parameter α\n\nK_B::AbstractFloat\n\n: Fitting parameter β\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VDTModelAll","page":"API","title":"ClimaCache.VDTModelAll","text":"VanDerTolFluorescenceModel that uses data from all observations \n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaCache.VDTModelDrought","page":"API","title":"ClimaCache.VDTModelDrought","text":"VanDerTolFluorescenceModel that uses data from drought stressed observations \n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaCache.AbstractReactionCenter","page":"API","title":"ClimaCache.AbstractReactionCenter","text":"abstract type AbstractReactionCenter{FT<:AbstractFloat}\n\nAbstract type for reaction center\n\nHierarchy of the AbstractReactionCenter\n\nVJPReactionCenter\nCytochromeReactionCenter\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.CytochromeReactionCenter","page":"API","title":"ClimaCache.CytochromeReactionCenter","text":"mutable struct CytochromeReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSI::AbstractFloat\n\n: Fraction of absorbed light used by PSI ETR\n\nK_D::AbstractFloat\n\n: Rate constant of consititutive heat loss from the antennae [ns⁻¹]\n\nK_F::AbstractFloat\n\n: Rate constant of fluorescence [ns⁻¹]\n\nK_PSI::AbstractFloat\n\n: Rate constant of photochemistry for PS I [ns⁻¹]\n\nK_PSII::AbstractFloat\n\n: Rate constant of photochemistry for PS II [ns⁻¹]\n\nK_U::AbstractFloat\n\n: Rate constant of excitation sharing for PS II [ns⁻¹]\n\nK_X::AbstractFloat\n\n: Rate constant of regulated heat loss via oxidized PS I center [s⁻¹]\n\nΦ_PSI_MAX::AbstractFloat\n\n: Maximal PS I photochemical yield\n\nϵ_1::AbstractFloat\n\n: Weight factor that PSI fluorescence reaches sensor (after reabsorption)\n\nϵ_2::AbstractFloat\n\n: Weight factor that PSII fluorescence reaches sensor (after reabsorption)\n\nϕ_f::AbstractFloat\n\n: Fluorescence yield\n\nϕ_p::AbstractFloat\n\n: Photochemical yield\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VJPReactionCenter","page":"API","title":"ClimaCache.VJPReactionCenter","text":"mutable struct VJPReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSII::AbstractFloat\n\n: Fraction of absorbed light used by PSII ETR\n\nK_D::AbstractFloat\n\n: Rate constant for thermal dissipation\n\nK_F::AbstractFloat\n\n: Rate constant for fluorescence\n\nK_P_MAX::AbstractFloat\n\n: Maximal rate constant for photochemistry\n\nΦ_PSII_MAX::AbstractFloat\n\n: max PSII yield (knpqr=0, all RC open)\n\nFLM::ClimaCache.VanDerTolFluorescenceModel\n\n: Fluorescence model\n\nk_npq_sus::AbstractFloat\n\n: Sustained NPQ rate constant (for seasonal changes, default is zero)\n\nϕ_f::AbstractFloat\n\n: Fluorescence yield\n\nϕ_p::AbstractFloat\n\n: Photochemical yield\n\n_f_m::AbstractFloat\n\n: Dark adapted yield (Kp=0)\n\n_f_m′::AbstractFloat\n\n: Light adapted yield (Kp=0)\n\n_f_o::AbstractFloat\n\n: Dark-adapted fluorescence yield (Kp=max)\n\n_f_o′::AbstractFloat\n\n: Light-adapted fluorescence yield in the dark (Kp=max)\n\n_k_npq_rev::AbstractFloat\n\n: Reversible NPQ rate constant (initially zero)\n\n_k_p::AbstractFloat\n\n: Rate constant for photochemistry\n\n_npq::AbstractFloat\n\n: Non-Photochemical quenching\n\n_q_e::AbstractFloat\n\n: Energy quenching\n\n_q_p::AbstractFloat\n\n: Photochemical quenching\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractPhotosynthesisModel","page":"API","title":"ClimaCache.AbstractPhotosynthesisModel","text":"abstract type AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nHierarchy of AbstractPhotosynthesisModel:\n\nC3CytochromeModel\nC3VJPModel\nC4VJPModel\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3CytochromeModel","page":"API","title":"ClimaCache.C3CytochromeModel","text":"mutable struct C3CytochromeModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 Cytochrome photosynthesis system information\n\nFields\n\nEFF_1::AbstractFloat\n\n: Coefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\n\nEFF_2::AbstractFloat\n\n: Coefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ac and Aj => Ai\n\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ai and Ap => Ag\n\nCOLIMIT_J::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for J\n\nTD_KC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kc temperature dependency\n\nTD_KO::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Ko temperature dependency\n\nTD_KQ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kq temperature dependency\n\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type respiration temperature dependency\n\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vcmax temperature dependency\n\nTD_Γ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Γ* temperature dependency\n\nTD_ηC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type η_C temperature dependency\n\nTD_ηL::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type η_L temperature dependency\n\nb₆f::AbstractFloat\n\n: Total concentration of Cytochrome b₆f [μmol m⁻²]\n\nr_d25::AbstractFloat\n\n: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_cmax25::AbstractFloat\n\n: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_c::AbstractFloat\n\n: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_j::AbstractFloat\n\n: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_p::AbstractFloat\n\n: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_e_to_c::AbstractFloat\n\n: Electron to CO₂ coefficient\n\n_j_pot::AbstractFloat\n\n: Potential Electron Transport Rate [μmol e⁻ m⁻² s⁻¹]\n\n_j_psi::AbstractFloat\n\n: PSI electron transport rate after colimitation\n\n_k_c::AbstractFloat\n\n: RubisCO coefficient Kc [Pa]\n\n_k_m::AbstractFloat\n\n: Michaelis-Menten's coefficient [Pa]\n\n_k_o::AbstractFloat\n\n: RubisCO coefficient Ko [Pa]\n\n_k_q::AbstractFloat\n\n: Maximal turnover rate of Cytochrome b₆f [e⁻ s⁻¹]\n\n_r_d::AbstractFloat\n\n: Respiration rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_t::AbstractFloat\n\n: Last leaf temperature. If different from leaf t, then make temperature correction\n\n_v_cmax::AbstractFloat\n\n: Maximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_v_qmax::AbstractFloat\n\n: Maximal Cytochrome b₆f activity [μmol e⁻ m⁻² s⁻¹]\n\n_η::AbstractFloat\n\n: ratio between JP700 and JP680\n\n_η_c::AbstractFloat\n\n: Coupling efficiency of cyclic electron flow [mol ATP mol⁻¹ e⁻]\n\n_η_l::AbstractFloat\n\n: Coupling efficiency of linear electron flow [mol ATP mol⁻¹ e⁻]\n\n_γ_star::AbstractFloat\n\n: CO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3VJPModel","page":"API","title":"ClimaCache.C3VJPModel","text":"mutable struct C3VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 photosynthesis system information\n\nFields\n\nEFF_1::AbstractFloat\n\n: Coefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\n\nEFF_2::AbstractFloat\n\n: Coefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ac and Aj => Ai\n\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ai and Ap => Ag\n\nCOLIMIT_J::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for J\n\nTD_JMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Jmax temperature dependency\n\nTD_KC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kc temperature dependency\n\nTD_KO::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Ko temperature dependency\n\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type respiration temperature dependency\n\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vcmax temperature dependency\n\nTD_Γ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Γ* temperature dependency\n\nj_max25::AbstractFloat\n\n: Maximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\n\nr_d25::AbstractFloat\n\n: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_cmax25::AbstractFloat\n\n: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_c::AbstractFloat\n\n: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_j::AbstractFloat\n\n: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_p::AbstractFloat\n\n: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_e_to_c::AbstractFloat\n\n: Electron to CO₂ coefficient\n\n_j::AbstractFloat\n\n: Electron transport [μmol m⁻² s⁻¹]\n\n_j_max::AbstractFloat\n\n: Maximal electron transport rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_j_pot::AbstractFloat\n\n: Potential Electron Transport Rate [μmol m⁻² s⁻¹]\n\n_k_c::AbstractFloat\n\n: RubisCO coefficient Kc [Pa]\n\n_k_m::AbstractFloat\n\n: Michaelis-Menten's coefficient [Pa]\n\n_k_o::AbstractFloat\n\n: RubisCO coefficient Ko [Pa]\n\n_r_d::AbstractFloat\n\n: Respiration rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_t::AbstractFloat\n\n: Last leaf temperature. If different from leaf t, then make temperature correction\n\n_v_cmax::AbstractFloat\n\n: Maximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_γ_star::AbstractFloat\n\n: CO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C4VJPModel","page":"API","title":"ClimaCache.C4VJPModel","text":"mutable struct C4VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C4 photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ac and Aj => Ai\n\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}, ClimaCache.SquareColimit{FT}} where FT<:AbstractFloat\n\n: AbstractColimit type colimitation method for Ai and Ap => Ag\n\nTD_KPEP::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Kpep temperature dependency\n\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type  respiration temperature dependency\n\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vcmax temperature dependency\n\nTD_VPMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\n\n: AbstractTemperatureDependency type Vpmax temperature dependency\n\nr_d25::AbstractFloat\n\n: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_cmax25::AbstractFloat\n\n: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\nv_pmax25::AbstractFloat\n\n: Maximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_c::AbstractFloat\n\n: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_j::AbstractFloat\n\n: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_a_p::AbstractFloat\n\n: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\n\n_e_to_c::AbstractFloat\n\n: Electron to CO₂ coefficient\n\n_j_pot::AbstractFloat\n\n: Potential Electron Transport Rate [μmol m⁻² s⁻¹]\n\n_k_pep::AbstractFloat\n\n: PEP coefficient Kpep [Pa]\n\n_r_d::AbstractFloat\n\n: Respiration rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_t::AbstractFloat\n\n: Last leaf temperature. If different from leaf t, then make temperature correction\n\n_v_cmax::AbstractFloat\n\n: Maximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n_v_pmax::AbstractFloat\n\n: Maximal PEP carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractPhotosynthesisMode","page":"API","title":"ClimaCache.AbstractPhotosynthesisMode","text":"abstract type AbstractPhotosynthesisMode\n\nHierarchy of AbstractPhotosynthesisMode:\n\nGCO₂Mode\nPCO₂Mode\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.GCO₂Mode","page":"API","title":"ClimaCache.GCO₂Mode","text":"An empty structure to signal the function to calculate photosynthetic rates based on leaf diffusive conductance to CO₂ \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.PCO₂Mode","page":"API","title":"ClimaCache.PCO₂Mode","text":"An empty structure to signal the function to calculate photosynthetic rates based on CO₂ partial pressure \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractTemperatureDependency","page":"API","title":"ClimaCache.AbstractTemperatureDependency","text":"abstract type AbstractTemperatureDependency{FT<:AbstractFloat}\n\nHierarchy of AbstractTemperatureDependency:\n\nArrhenius\nArrheniusPeak\nQ10\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Arrhenius","page":"API","title":"ClimaCache.Arrhenius","text":"mutable struct Arrhenius{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn Arrhenius type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n\nFields\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\nΔHA::AbstractFloat\n\n: Activation energy\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.ArrheniusPeak","page":"API","title":"ClimaCache.ArrheniusPeak","text":"mutable struct ArrheniusPeak{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn ArrheniusPeak type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n          cdot dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n                         1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\nΔHA::AbstractFloat\n\n: Activation energy\n\nΔHD::AbstractFloat\n\n: Deactivation energy\n\nΔSV::AbstractFloat\n\n: Entropy factor\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Q10","page":"API","title":"ClimaCache.Q10","text":"mutable struct Q10{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nA Q10 type struct using\n\nY_1 = Y_0 cdot Q_10 ^ dfracT_1 - T_010\n\nFields\n\nQ_10::AbstractFloat\n\n: Power of Q10 correction\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Q10Peak","page":"API","title":"ClimaCache.Q10Peak","text":"mutable struct Q10Peak{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nA Q10Peak type struct using\n\nY_1 = Y_0 cdot Q_10 ^ dfracT_1 - T_010\n          cdot dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n                         1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nQ_10::AbstractFloat\n\n: Power of Q10 correction\n\nT_REF::AbstractFloat\n\n: Reference temperature [K]\n\nVAL_REF::AbstractFloat\n\n: Uncorrected vakye at reference temperature\n\nΔHD::AbstractFloat\n\n: Deactivation energy\n\nΔSV::AbstractFloat\n\n: Entropy factor\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractLeaf","page":"API","title":"ClimaCache.AbstractLeaf","text":"abstract type AbstractLeaf{FT<:AbstractFloat}\n\nAbstract type for leaf\n\nHierarchy of the AbstractLeaf\n\nLeaf\nLeaves1D\nLeaves2D\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Leaf","page":"API","title":"ClimaCache.Leaf","text":"mutable struct Leaf{FT<:AbstractFloat} <: ClimaCache.AbstractLeaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters. This structure is meant for leaf level research and canopy radiative transfer scheme without sunlit and shaded partitioning (ppar and ppar-dependent variables).\n\nFields\n\nAPAR_CAR::Bool\n\n: Whether APAR absorbed by carotenoid is counted as PPAR\n\nCP::AbstractFloat\n\n: Specific heat capacity of leaf [J K⁻¹ kg⁻¹]\n\nG_LIMITS::Vector{FT} where FT<:AbstractFloat\n\n: Minimal and maximum stomatal conductance for H₂O at 25 °C [mol m⁻² s⁻¹]\n\nWIDTH::AbstractFloat\n\n: Leaf width [m]\n\nBIO::Union{ClimaCache.BroadbandLeafBiophysics{FT}, ClimaCache.HyperspectralLeafBiophysics{FT}} where FT<:AbstractFloat\n\n: AbstractLeafBiophysics type leaf biophysical parameters\n\nHS::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system\n\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\n\n: AbstractReactionCenter type photosynthesis reaction center\n\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\n\n: AbstractPhotosynthesisModel type photosynthesis model\n\nSM::ClimaCache.AbstractStomataModel\n\n: Stomatal model\n\ng_CO₂_b::AbstractFloat\n\n: Boundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\nppar::AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis [μmol m⁻² s⁻¹]\n\nt::AbstractFloat\n\n: Current leaf temperature\n\ne::AbstractFloat\n\n: Total stored energy per area [J m⁻²]\n\ng_H₂O_s::AbstractFloat\n\n: Stomatal conductance to water vapor [mol m⁻² s⁻¹]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂g∂t::AbstractFloat\n\n: Marginal increase of conductance per time [mol m⁻² s⁻²]\n\na_gross::AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_cp::AbstractFloat\n\n: Combined specific heat capacity of leaf per area [J K⁻¹ m⁻²]\n\n_g_CO₂::AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\n_p_CO₂_i::AbstractFloat\n\n: Leaf internal CO₂ partial pressure [Pa]\n\n_p_CO₂_s::AbstractFloat\n\n: Leaf surface CO₂ partial pressure [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Leaves1D","page":"API","title":"ClimaCache.Leaves1D","text":"mutable struct Leaves1D{FT<:AbstractFloat} <: ClimaCache.AbstractLeaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters for a single canopy layer. This structure is meant for canopy level research and canopy radiative transfer scheme with sunlit and shaded partitioning.\n\nFields\n\nCP::AbstractFloat\n\n: Specific heat capacity of leaf [J K⁻¹ kg⁻¹]\n\nG_LIMITS::Vector{FT} where FT<:AbstractFloat\n\n: Minimal and maximum stomatal conductance for H₂O at 25 °C [mol m⁻² s⁻¹]\n\nWIDTH::AbstractFloat\n\n: Leaf width [m]\n\nBIO::ClimaCache.BroadbandLeafBiophysics\n\n: BroadbandLeafBiophysics type leaf biophysical parameters\n\nHS::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system\n\nHS2::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system used for other calculations (say sunlit and shaded leaf partitioning)\n\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\n\n: AbstractReactionCenter type photosynthesis reaction center\n\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\n\n: AbstractPhotosynthesisModel type photosynthesis model\n\nSM::ClimaCache.AbstractStomataModel\n\n: Stomatal model\n\ng_CO₂_b::Vector{FT} where FT<:AbstractFloat\n\n: Boundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\nppar::Vector{FT} where FT<:AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis [μmol m⁻² s⁻¹]\n\nt::Vector{FT} where FT<:AbstractFloat\n\n: Current leaf temperature\n\ne::Vector{FT} where FT<:AbstractFloat\n\n: Total stored energy per area [J m⁻²]\n\ng_H₂O_s::Vector{FT} where FT<:AbstractFloat\n\n: Stomatal conductance to water vapor [mol m⁻² s⁻¹]\n\n∂e∂t::Vector{FT} where FT<:AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂g∂t::Vector{FT} where FT<:AbstractFloat\n\n: Marginal increase of conductance per time [mol m⁻² s⁻²]\n\na_gross::Vector{FT} where FT<:AbstractFloat\n\n: Gross photosynthetic rate [μmol m⁻² s⁻¹]\n\na_net::Vector{FT} where FT<:AbstractFloat\n\n: Net photosynthetic rate [μmol m⁻² s⁻¹]\n\n_cp::Vector{FT} where FT<:AbstractFloat\n\n: Combined specific heat capacity of leaf per area [J K⁻¹ m⁻²]\n\n_g_CO₂::Vector{FT} where FT<:AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\n_p_CO₂_i::Vector{FT} where FT<:AbstractFloat\n\n: Leaf internal CO₂ partial pressure [Pa]\n\n_p_CO₂_s::Vector{FT} where FT<:AbstractFloat\n\n: Leaf surface CO₂ partial pressure [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Leaves2D","page":"API","title":"ClimaCache.Leaves2D","text":"mutable struct Leaves2D{FT<:AbstractFloat} <: ClimaCache.AbstractLeaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters for a single canopy layer. This structure is meant for canopy level research and canopy radiative transfer scheme with sunlit and shaded partitioning as well as leaf     angular distribution.\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nAPAR_CAR::Bool\n\n: Whether APAR absorbed by carotenoid is counted as PPAR\n\nCP::AbstractFloat\n\n: Specific heat capacity of leaf [J K⁻¹ kg⁻¹]\n\nG_LIMITS::Vector{FT} where FT<:AbstractFloat\n\n: Minimal and maximum stomatal conductance for H₂O at 25 °C [mol m⁻² s⁻¹]\n\nWIDTH::AbstractFloat\n\n: Leaf width [m]\n\nBIO::ClimaCache.HyperspectralLeafBiophysics\n\n: HyperspectralLeafBiophysics type leaf biophysical parameters\n\nHS::ClimaCache.LeafHydraulics\n\n: LeafHydraulics type leaf hydraulic system\n\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\n\n: AbstractReactionCenter type photosynthesis reaction center\n\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\n\n: AbstractPhotosynthesisModel type photosynthesis model\n\nSM::ClimaCache.AbstractStomataModel\n\n: Stomatal model\n\ng_CO₂_b::AbstractFloat\n\n: Boundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\n\nppar_shaded::AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis for shaded leaves [μmol m⁻² s⁻¹]\n\nppar_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Absorbed photosynthetically active radiation used for photosynthesis for sunlit leaves [μmol m⁻² s⁻¹]\n\nt::AbstractFloat\n\n: Current leaf temperature [K]\n\ne::AbstractFloat\n\n: Total stored energy per area [J m⁻²]\n\ng_H₂O_s_shaded::AbstractFloat\n\n: Stomatal conductance to water vapor for shaded leaves [mol m⁻² s⁻¹]\n\ng_H₂O_s_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Stomatal conductance to water vapor for sunlit leaves [mol m⁻² s⁻¹]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W m⁻²]\n\n∂g∂t_shaded::AbstractFloat\n\n: Marginal increase of conductance per time for shaded leaves [mol m⁻² s⁻²]\n\n∂g∂t_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Marginal increase of conductance per timefor sunlit leaves [mol m⁻² s⁻²]\n\na_gross_shaded::AbstractFloat\n\n: Gross photosynthetic rate for shaded leaves [μmol m⁻² s⁻¹]\n\na_gross_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Gross photosynthetic rate for sunlit leaves [μmol m⁻² s⁻¹]\n\na_net_shaded::AbstractFloat\n\n: Net photosynthetic rate for shaded leaves [μmol m⁻² s⁻¹]\n\na_net_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Net photosynthetic rate for sunlit leaves [μmol m⁻² s⁻¹]\n\nϕ_f_shaded::AbstractFloat\n\n: Fluorescence quantum yield for shaded leaves [-]\n\nϕ_f_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Fluorescence quantum yield for sunlit leaves [-]\n\n_cp::AbstractFloat\n\n: Combined specific heat capacity of leaf per area [J K⁻¹ m⁻²]\n\n_g_CO₂_shaded::AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ for shaded leaves [mol m⁻² s⁻¹]\n\n_g_CO₂_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Total leaf diffusive conductance to CO₂ for sunlit leaves [mol m⁻² s⁻¹]\n\n_p_CO₂_i_shaded::AbstractFloat\n\n: Leaf internal CO₂ partial pressure for shaded leaves [Pa]\n\n_p_CO₂_i_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Leaf internal CO₂ partial pressure for sunlit leaves [Pa]\n\n_p_CO₂_s_shaded::AbstractFloat\n\n: Leaf surface CO₂ partial pressure for shaded leaves [Pa]\n\n_p_CO₂_s_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Leaf surface CO₂ partial pressure for sunlit leaves [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#Stomatal-Models","page":"API","title":"Stomatal Models","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractBetaParameter\nBetaParameterG1\nBetaParameterKleaf\nBetaParameterKsoil\nBetaParameterPleaf\nBetaParameterPsoil\nBetaParameterVcmax\nBetaParameterΘ\nBetaFunction\nAbstractStomataModel\nAndereggSM\nBallBerrySM\nEllerSM\nGentineSM\nLeuningSM\nMedlynSM\nSperrySM\nWangSM\nWang2SM","category":"page"},{"location":"API/#ClimaCache.AbstractBetaParameter","page":"API","title":"ClimaCache.AbstractBetaParameter","text":"abstract type AbstractBetaParameter\n\nHierarchy of AbstractBetaParameter:\n\nBetaParameterG1 PARAM_Y\nBetaParameterKleaf PARAM_X\nBetaParameterKsoil PARAM_X\nBetaParameterPleaf PARAM_X\nBetaParameterPsoil PARAM_X\nBetaParameterVcmax PARAM_Y\nBetaParameterΘ PARAM_X\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterG1","page":"API","title":"ClimaCache.BetaParameterG1","text":"Empty struct indicating that the function tunes G1 parameter of an empirical model \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterKleaf","page":"API","title":"ClimaCache.BetaParameterKleaf","text":"Empty struct indicating that the beta function is based on Kleaf \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterKsoil","page":"API","title":"ClimaCache.BetaParameterKsoil","text":"Empty struct indicating that the beta function is based on Ksoil \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterPleaf","page":"API","title":"ClimaCache.BetaParameterPleaf","text":"Empty struct indicating that the beta function is based on Pleaf \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterPsoil","page":"API","title":"ClimaCache.BetaParameterPsoil","text":"Empty struct indicating that the beta function is based on Psoil \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterVcmax","page":"API","title":"ClimaCache.BetaParameterVcmax","text":"Empty struct indicating that the function tunes Vcmax for an empirical model \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaParameterΘ","page":"API","title":"ClimaCache.BetaParameterΘ","text":"Empty struct indicating that the beta function is based on soil water content \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BetaFunction","page":"API","title":"ClimaCache.BetaFunction","text":"mutable struct BetaFunction{FT<:AbstractFloat}\n\nStruct to tune G1 or Vcmax based on leaf hydraulic conductance\n\nFields\n\nFUNC::Function\n\n: Function to turn variables to β tuning factor\n\nPARAM_X::Union{ClimaCache.BetaParameterKleaf, ClimaCache.BetaParameterKsoil, ClimaCache.BetaParameterPleaf, ClimaCache.BetaParameterPsoil, ClimaCache.BetaParameterΘ}\n\n: Input parameter to base on\n\nPARAM_Y::Union{ClimaCache.BetaParameterG1, ClimaCache.BetaParameterVcmax}\n\n: Target parameter to tune\n\nβ₁::AbstractFloat\n\n: Tuning factor computed\n\nβ₂::AbstractFloat\n\n: Tuning factor computed for HS2\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractStomataModel","page":"API","title":"ClimaCache.AbstractStomataModel","text":"abstract type AbstractStomataModel{FT<:AbstractFloat}\n\nHierarchy of AbstractStomataModel:\n\nAndereggSM\nBallBerrySM\nEllerSM\nGentineSM\nLeuningSM\nMedlynSM\nSperrySM\nWangSM\nWang2SM\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AndereggSM","page":"API","title":"ClimaCache.AndereggSM","text":"mutable struct AndereggSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Anderegg stomatal model. The equation used for Anderegg type model is\n\ndfracΘE = dfrac2aP + bK\n\nwhere K is dfracEP.\n\nFields\n\nA::AbstractFloat\n\n: Quadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻²]\n\nB::AbstractFloat\n\n: Quadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻¹]\n\nK::AbstractFloat\n\n: Slope constant [mol² m⁻² s⁻¹ μmol⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BallBerrySM","page":"API","title":"ClimaCache.BallBerrySM","text":"mutable struct BallBerrySM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Ball Berry stomatal model. The equation used for Ball-Berry type model is\n\ngs = g0 + g1  RH  dfracACs\n\nFields\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [-]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.EllerSM","page":"API","title":"ClimaCache.EllerSM","text":"mutable struct EllerSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for Eller stomatal model. The equation used for Eller type model is\n\ndfracΘE = -dfracKE  dfracAK\n\nwhere K is dfracEP.\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.GentineSM","page":"API","title":"ClimaCache.GentineSM","text":"mutable struct GentineSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Gentine stomatal model. The equation used for Gentine type model is\n\ngs = g0 + g1  dfrack_leafk_max  dfracACi\n\nFields\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [-]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeuningSM","page":"API","title":"ClimaCache.LeuningSM","text":"mutable struct LeuningSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Leuning stomatal model. The equation used for Leuning type model is\n\ngs = g0 + g1  dfracACs - Γ^*  dfrac11 + dfracVPDd0\n\nFields\n\nD0::AbstractFloat\n\n: Fitting parameter of d/d0 below the fraction, same unit as vpd [Pa]\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [-]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MedlynSM","page":"API","title":"ClimaCache.MedlynSM","text":"mutable struct MedlynSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nStruct for Medlyn stomatal model. The equation used for Medlyn type model is\n\ngs = g0 + 16  left( 1 + dfracg1sqrtVPD right)  dfracACa\n\nFields\n\nG0::AbstractFloat\n\n: Minimal stomatal conductance [mol m⁻² s⁻¹]\n\nG1::AbstractFloat\n\n: Slope of conductance-photosynthesis correlation [sqrt(Pa)]\n\nβ::ClimaCache.BetaFunction\n\n: Beta function to force stomatal response to soil moisture\n\nτ::AbstractFloat\n\n: Time constant for the prognostic stomatal conductance [s]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SperrySM","page":"API","title":"ClimaCache.SperrySM","text":"mutable struct SperrySM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for Sperry stomatal model. The equation used for Sperry type model is\n\ndfracΘE = -dfracKE  dfracA_maxK_max\n\nwhere K is dfracEP.\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WangSM","page":"API","title":"ClimaCache.WangSM","text":"mutable struct WangSM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for Wang stomatal model. The equation used for Wang type model is\n\ndfracΘE = dfracAE_crit - E\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Wang2SM","page":"API","title":"ClimaCache.Wang2SM","text":"mutable struct Wang2SM{FT<:AbstractFloat} <: ClimaCache.AbstractStomataModel{FT<:AbstractFloat}\n\nEmpty struct for a new Wang stomatal model modified from Anderegg model. The equation used for new Wang2SM type model is\n\ndfracΘE = dfracaAPK\n\nwhere K is dfracEP.\n\nFields\n\nA::AbstractFloat\n\n: Quadratic equation parameter [MPa⁻²]\n\nK::AbstractFloat\n\n: Slope constant [mol² m⁻² s⁻¹ μmol⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#Radiation","page":"API","title":"Radiation","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"WaveLengthSet\nAbstractRadiation\nBroadbandRadiation\nHyperspectralRadiation\nHyperspectralAbsorption\nSunSensorGeometry\nHyperspectralMLCanopyOpticalProperty\nAbstractCanopyRadiationProfile\nBroadbandSLCanopyRadiationProfile\nHyperspectralMLCanopyRadiationProfile\nAbstractLIDFAlgorithm\nVerhoefLIDF\nAbstractCanopy\nBroadbandSLCanopy\nHyperspectralMLCanopy","category":"page"},{"location":"API/#ClimaCache.WaveLengthSet","page":"API","title":"ClimaCache.WaveLengthSet","text":"struct WaveLengthSet{FT<:AbstractFloat}\n\nImmutable structure that stores wave length information.\n\nFields\n\nDATASET::String\n\n: File path to the Netcdf dataset\n\nWL_NIR::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for NIR [nm]\n\nWL_PAR::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for PAR [nm]\n\nWL_SIF::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for SIF emission [nm]\n\nWL_SIFE::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength limits for SIF excitation [nm]\n\nΛ::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength (bins) [nm]\n\nΛ_LOWER::Vector{FT} where FT<:AbstractFloat\n\n: Lower boundary wavelength [nm]\n\nΛ_UPPER::Vector{FT} where FT<:AbstractFloat\n\n: Upper boundary wavelength [nm]\n\nIΛ_NIR::Vector{Int64}\n\n: Indicies of Λ_NIR in Λ\n\nIΛ_PAR::Vector{Int64}\n\n: Indicies of Λ_PAR in Λ\n\nIΛ_SIF::Vector{Int64}\n\n: Indicies of Λ_SIF in Λ\n\nIΛ_SIFE::Vector{Int64}\n\n: Indicies of Λ_SIFE in Λ\n\nDIM_NIR::Int64\n\n: Number of wavelength bins for NIR\n\nDIM_PAR::Int64\n\n: Number of wavelength bins for PAR\n\nDIM_SIF::Int64\n\n: Number of wavelength bins for SIF\n\nDIM_SIFE::Int64\n\n: Number of wavelength bins for SIFE\n\nDIM_WL::Int64\n\n: Number of wavelength bins\n\nΔΛ::Vector{FT} where FT<:AbstractFloat\n\n: Differential wavelength [nm]\n\nΔΛ_PAR::Vector{FT} where FT<:AbstractFloat\n\n: Differential wavelength for PAR [nm]\n\nΔΛ_SIFE::Vector{FT} where FT<:AbstractFloat\n\n: Differential wavelength for SIF excitation [nm]\n\nΛ_PAR::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength bins for PAR [nm]\n\nΛ_SIF::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength bins for SIF [nm]\n\nΛ_SIFE::Vector{FT} where FT<:AbstractFloat\n\n: Wavelength bins for SIF excitation [nm]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractRadiation","page":"API","title":"ClimaCache.AbstractRadiation","text":"abstract type AbstractRadiation{FT<:AbstractFloat}\n\nHierarchy of AbstractRadiation:\n\nBroadbandRadiation\nHyperspectralRadiation\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandRadiation","page":"API","title":"ClimaCache.BroadbandRadiation","text":"mutable struct BroadbandRadiation{FT<:AbstractFloat} <: ClimaCache.AbstractRadiation{FT<:AbstractFloat}\n\nStructure that stores broadband radiation information\n\nFields\n\ne_diffuse_nir::AbstractFloat\n\n: Diffuse radiation from NIR region [W m⁻²]\n\ne_diffuse_par::AbstractFloat\n\n: Diffuse radiation from PAR region [W m⁻²]\n\ne_direct_nir::AbstractFloat\n\n: Direct radiation from NIR region [W m⁻²]\n\ne_direct_par::AbstractFloat\n\n: Direct radiation from PAR region [W m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralRadiation","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"mutable struct HyperspectralRadiation{FT<:AbstractFloat} <: ClimaCache.AbstractRadiation{FT<:AbstractFloat}\n\nStructure that stores hyperspectral radiation information\n\nFields\n\ne_diffuse::Vector{FT} where FT<:AbstractFloat\n\n: Diffuse radiation [mW m⁻² nm⁻¹]\n\ne_direct::Vector{FT} where FT<:AbstractFloat\n\n: Direct radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralAbsorption","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"struct HyperspectralAbsorption{FT<:AbstractFloat}\n\nImmutable struct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nDATASET::String\n\n: File path to the Netcdf dataset\n\nK_ANT::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of anthocynanin [-]\n\nK_BROWN::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of senescent material (brown pigments) [-]\n\nK_CAB::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of chlorophyll a and b [-]\n\nK_CAR_V::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of violaxanthin carotenoid [-]\n\nK_CAR_Z::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of zeaxanthin carotenoid [-]\n\nK_CBC::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of carbon-based constituents [-]\n\nK_H₂O::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of water [-]\n\nK_LMA::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of dry matter [-]\n\nK_PRO::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of protein [-]\n\nK_PS::Vector{FT} where FT<:AbstractFloat\n\n: Specific absorption coefficients of PS I and II [-]\n\nNR::Vector{FT} where FT<:AbstractFloat\n\n: Refractive index [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SunSensorGeometry","page":"API","title":"ClimaCache.SunSensorGeometry","text":"mutable struct SunSensorGeometry{FT<:AbstractFloat}\n\nStructure that stores sun sensor geometry information.\n\nFields\n\nHAA::AbstractFloat\n\n: Hill facing azimuth angle [°], 0 for North, 180 for south\n\nHSA::AbstractFloat\n\n: Hill slope angle [°]\n\nsaa::AbstractFloat\n\n: Solar azimuth angle [°], a function of time\n\nsza::AbstractFloat\n\n: Solar zenith angle [°], a function of lat and time\n\nvaa::AbstractFloat\n\n: Viewing azimuth angle [°]\n\nvza::AbstractFloat\n\n: Viewing zenith angle [°]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralMLCanopyOpticalProperty","page":"API","title":"ClimaCache.HyperspectralMLCanopyOpticalProperty","text":"mutable struct HyperspectralMLCanopyOpticalProperty{FT<:AbstractFloat}\n\nStructure for Verhoef LIDF algorithm\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_SIF::Int64\n\n: Dimension of SIF wave length bins\n\nDIM_SIFE::Int64\n\n: Dimension of SIF excitation wave length bins\n\nDIM_WL::Int64\n\n: Dimension of short wave length bins\n\nddb::AbstractFloat\n\n: Backward diffuse->diffuse scatter weight\n\nddf::AbstractFloat\n\n: Forward diffuse->diffuse scatter weight\n\ndob::AbstractFloat\n\n: Backward diffuse->observer scatter weight\n\ndof::AbstractFloat\n\n: Forward diffuse->observer scatter weight\n\nfo::Matrix{FT} where FT<:AbstractFloat\n\n: Conversion factor fo for angle towards observer at different inclination and azimuth angles\n\nfs::Matrix{FT} where FT<:AbstractFloat\n\n: Conversion factor fs for angles from solar at different inclination and azimuth angles\n\nko::AbstractFloat\n\n: Observer direction beam extinction coefficient weight (diffuse)\n\nks::AbstractFloat\n\n: Solar direction beam extinction coefficient weight (direct)\n\np_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: Probability of directly viewing a leaf in solar direction at different layers\n\npo::Vector{FT} where FT<:AbstractFloat\n\n: Probability of directly viewing a leaf in observer direction at different layer boundaries\n\nps::Vector{FT} where FT<:AbstractFloat\n\n: Probability of directly viewing a leaf in solar direction at different layer boundaries\n\npso::Vector{FT} where FT<:AbstractFloat\n\n: Bi-directional probability of directly viewing a leaf at different layer boundaries (solar->canopy->observer)\n\nsdb::AbstractFloat\n\n: Directional->diffuse backscatter weight\n\nsdf::AbstractFloat\n\n: Directional->diffuse forward scatter weight\n\nsob::AbstractFloat\n\n: Solar directional->observer weight of specular2directional backscatter coefficient\n\nsof::AbstractFloat\n\n: Solar directional->observer weight of specular2directional forward coefficient\n\nϵ::Vector{FT} where FT<:AbstractFloat\n\n: Effective emissivity for different layers\n\nρ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective reflectance for diffuse->diffuse\n\nρ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Effective reflectance for longwave radiation\n\nρ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective reflectance for directional->diffuse\n\nσ_ddb::Matrix{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficient for diffuse->diffuse at different layers and wavelength bins\n\nσ_ddf::Matrix{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficient for diffuse->diffuse at different layers and wavelength bins\n\nσ_dob::Matrix{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficient for diffuse->observer at different layers and wavelength bins\n\nσ_dof::Matrix{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficient for diffuse->observer at different layers and wavelength bins\n\nσ_sdb::Matrix{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficient for solar directional->diffuse at different layers and wavelength bins\n\nσ_sdf::Matrix{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficient for solar directional->diffuse at different layers and wavelength bins\n\nσ_so::Matrix{FT} where FT<:AbstractFloat\n\n: Bidirectional from solar to observer scattering coefficient at different layers and wavelength bins\n\nτ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective tranmittance for diffuse->diffuse\n\nτ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Effective tranmittance for longwave radiation\n\nτ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Effective tranmittance for solar directional->diffuse\n\n_Co::Vector{FT} where FT<:AbstractFloat\n\n: cos(inclination) * cos(vza) at different inclination angles\n\n_Cs::Vector{FT} where FT<:AbstractFloat\n\n: cos(inclination) * cos(sza) at different inclination angles\n\n_So::Vector{FT} where FT<:AbstractFloat\n\n: sin(inclination) * sin(vza) at different inclination angles\n\n_Ss::Vector{FT} where FT<:AbstractFloat\n\n: sin(inclination) * sin(sza) at different inclination angles\n\n_abs_fo::Matrix{FT} where FT<:AbstractFloat\n\n: abs of fo\n\n_abs_fs::Matrix{FT} where FT<:AbstractFloat\n\n: abs of fs\n\n_abs_fs_fo::Matrix{FT} where FT<:AbstractFloat\n\n: abs of fs * fo\n\n_bf::AbstractFloat\n\n: Weighted sum of cos²(inclination)\n\n_cos_θ_azi_raa::Vector{FT} where FT<:AbstractFloat\n\n: Cosine of Θ_AZI - raa\n\n_fo_cos_θ_incl::Matrix{FT} where FT<:AbstractFloat\n\n: fo * cos Θ_INCL\n\n_fs_cos_θ_incl::Matrix{FT} where FT<:AbstractFloat\n\n: fs * cos Θ_INCL\n\n_fs_fo::Matrix{FT} where FT<:AbstractFloat\n\n: fs * fo\n\n_ko::Vector{FT} where FT<:AbstractFloat\n\n: Outgoing beam extinction coefficient weights at different inclination angles\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Solar beam extinction coefficient weights at different inclination angles\n\n_mat⁺::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling matrix for SIF excitation\n\n_mat⁻::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling matrix for SIF excitation\n\n_sb::Vector{FT} where FT<:AbstractFloat\n\n: Backward scattering coefficients at different inclination angles\n\n_sf::Vector{FT} where FT<:AbstractFloat\n\n: Forward scattering coefficients at different inclination angles\n\n_tmp_mat_incl_azi_1::Matrix{FT} where FT<:AbstractFloat\n\n: Temporary cache used for matrix adding up purpose (DIMINCL * DIMAZI)\n\n_tmp_mat_incl_azi_2::Matrix{FT} where FT<:AbstractFloat\n\n: Temporary cache used for matrix adding up purpose (DIMINCL * DIMAZI)\n\n_tmp_vec_azi::Vector{FT} where FT<:AbstractFloat\n\n: Temporary cache used for vector operations (DIM_AZI)\n\n_tmp_vec_layer::Vector{FT} where FT<:AbstractFloat\n\n: Temporary cache used for vector operations (DIM_LAYER)\n\n_tmp_vec_sif_1::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_2::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_3::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_4::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_5::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sif_6::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF information\n\n_tmp_vec_sife_1::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF excitation information\n\n_tmp_vec_sife_2::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF excitation information\n\n_tmp_vec_sife_3::Vector{FT} where FT<:AbstractFloat\n\n: Cache variable to store the SIF excitation information\n\n_tmp_vec_λ::Vector{FT} where FT<:AbstractFloat\n\n: Temporary cache used for vector operations (DIM_WL)\n\n_ρ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Reflectance for diffuse->diffuse at each canopy layer\n\n_ρ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Reflectance for longwave radiation at each canopy layer\n\n_ρ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Reflectance for solar directional->diffuse at each canopy layer\n\n_τ_dd::Matrix{FT} where FT<:AbstractFloat\n\n: Tranmittance for diffuse->diffuse at each canopy layer\n\n_τ_lw::Vector{FT} where FT<:AbstractFloat\n\n: Tranmittance for longwave radiation at each canopy layer\n\n_τ_sd::Matrix{FT} where FT<:AbstractFloat\n\n: Tranmittance for solar directional->diffuse at each canopy layer\n\n_τ_ss::AbstractFloat\n\n: Tranmittance for solar directional->directional at each canopy layer\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractCanopyRadiationProfile","page":"API","title":"ClimaCache.AbstractCanopyRadiationProfile","text":"abstract type AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractCanopy:\n\nBroadbandSLCanopyRadiationProfile\nHyperspectralMLCanopyRadiationProfile\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSLCanopyRadiationProfile","page":"API","title":"ClimaCache.BroadbandSLCanopyRadiationProfile","text":"mutable struct BroadbandSLCanopyRadiationProfile{FT<:AbstractFloat} <: ClimaCache.AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nStructure to store canopy radiation profiles\n\nFields\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\napar_shaded::AbstractFloat\n\n: Mean shaded leaf APAR (per leaf area) in μmol m⁻² s⁻¹\n\napar_sunlit::AbstractFloat\n\n: Mean sunlit leaf APAR (per leaf area) in μmol m⁻² s⁻¹\n\nk_diffuse::AbstractFloat\n\n: Weighted extinction coefficient for diffuse radiation (ratio between projected area to true leaf area)\n\nk_direct::AbstractFloat\n\n: Weighted extinction coefficient for direct radiation (ratio between projected area to true leaf area)\n\nlai_shaded::AbstractFloat\n\n: Total shaded leaf area index\n\nlai_sunlit::AbstractFloat\n\n: Total sunlit leaf area index\n\npar_shaded::AbstractFloat\n\n: Mean shaded leaf PAR (per leaf area) in μmol m⁻² s⁻¹\n\npar_sunlit::AbstractFloat\n\n: Mean sunlit leaf PAR (per leaf area) in μmol m⁻² s⁻¹\n\nr_net_shaded::AbstractFloat\n\n: Net absorbed radiation for shaded leaves [W m⁻²]\n\nr_net_sunlit::AbstractFloat\n\n: Net absorbed radiation for sunlit leaves [W m⁻²]\n\n_k_diffuse::Vector{FT} where FT<:AbstractFloat\n\n: Extinction coefficient for diffuse radiation at different leaf inclination angles\n\n_k_direct::Vector{FT} where FT<:AbstractFloat\n\n: Extinction coefficient for direct radiation at different leaf inclination angles\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralMLCanopyRadiationProfile","page":"API","title":"ClimaCache.HyperspectralMLCanopyRadiationProfile","text":"mutable struct HyperspectralMLCanopyRadiationProfile{FT<:AbstractFloat} <: ClimaCache.AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nStructure to store canopy radiation profiles\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_PAR::Int64\n\n: Dimension of PAR wave length bins\n\nDIM_SIF::Int64\n\n: Dimension of SIF wave length bins\n\nDIM_WL::Int64\n\n: Dimension of short wave length bins\n\nalbedo::Vector{FT} where FT<:AbstractFloat\n\n: Albedo towards the viewing direction\n\napar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean APAR for shaded leaves [μmol m⁻² s⁻¹]\n\napar_sunlit::Array{FT, 3} where FT<:AbstractFloat\n\n: APAR for sunlit leaves [μmol m⁻² s⁻¹]\n\ne_diffuse_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling diffuse short-wave radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\n\ne_diffuse_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling diffuse short-wave radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\n\ne_direct::Matrix{FT} where FT<:AbstractFloat\n\n: Solar directly radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\n\ne_net_diffuse::Matrix{FT} where FT<:AbstractFloat\n\n: Net diffuse radiation at each canopy layer for APAR [mW m⁻² nm⁻¹]\n\ne_net_direct::Matrix{FT} where FT<:AbstractFloat\n\n: Net direct radiation at each canopy layer for APAR [mW m⁻² nm⁻¹]\n\ne_o::Vector{FT} where FT<:AbstractFloat\n\n: Total radiation towards the viewing direction [mW m⁻² nm⁻¹]\n\ne_sum_diffuse::Matrix{FT} where FT<:AbstractFloat\n\n: Sum diffuse radiation at each canopy layer for PAR [mW m⁻² nm⁻¹]\n\ne_sum_direct::Matrix{FT} where FT<:AbstractFloat\n\n: Sum direct radiation at each canopy layer for PAR [mW m⁻² nm⁻¹]\n\ne_v::Matrix{FT} where FT<:AbstractFloat\n\n: Radiation towards the viewing direction per layer (including soil) [mW m⁻² nm⁻¹]\n\npar_in::AbstractFloat\n\n: Total incoming radiation PAR [μmol m⁻² s⁻¹]\n\npar_in_diffuse::AbstractFloat\n\n: Diffuse incoming radiation PAR [μmol m⁻² s⁻¹]\n\npar_in_direct::AbstractFloat\n\n: Direct incoming radiation PAR [μmol m⁻² s⁻¹]\n\npar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean PAR for shaded leaves (before absorption) [μmol m⁻² s⁻¹]\n\npar_sunlit::Array{FT, 3} where FT<:AbstractFloat\n\n: PAR for sunlit leaves (before absorption) [μmol m⁻² s⁻¹]\n\nr_lw::Vector{FT} where FT<:AbstractFloat\n\n: Longwave energy flux from leaves per leaf area (one side) [W m⁻²]\n\nr_lw_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling longwave energy flux [W m⁻²]\n\nr_lw_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling longwave energy flux [W m⁻²]\n\nr_net_lw::Vector{FT} where FT<:AbstractFloat\n\n: Net longwave energy absorption for all leaves [W m⁻²]\n\nr_net_sw::Vector{FT} where FT<:AbstractFloat\n\n: Net shortwave energy absorption for all leaves [W m⁻²]\n\nr_net_sw_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Net shortwave energy absorption for shaded leaves [W m⁻²]\n\nr_net_sw_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: Net shortwave energy absorption for sunlit leaves [W m⁻²]\n\ns_layer_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for sunlit leaves at each wavelength for a layer\n\ns_layer_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for sunlit leaves at each wavelength for a layer\n\nsif_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling SIF\n\nsif_obs::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction\n\nsif_obs_shaded::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from shaded APAR\n\nsif_obs_scatter::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from scattering\n\nsif_obs_soil::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from soil reflection\n\nsif_obs_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: SIF at observer direction from sunlit APAR\n\nsif_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling SIF\n\n_apar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean APAR for shaded leaves per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_apar_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: APAR for sunlit leaves per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_par_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean PAR for shaded leaves per wavelength (before absorption) [μmol m⁻² s⁻¹ nm⁻¹]\n\n_par_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: PAR for sunlit leaves per wavelength (before absorption) [μmol m⁻² s⁻¹ nm⁻¹]\n\n_ppar_shaded::Vector{FT} where FT<:AbstractFloat\n\n: Mean APAR for shaded leaves for photosynthesis per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_ppar_sunlit::Vector{FT} where FT<:AbstractFloat\n\n: APAR for sunlit leaves for photosynthesis per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n\n_r_emit_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling longwave energy flux cache [W m⁻²]\n\n_r_emit_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling longwave energy flux cache [W m⁻²]\n\n_s_emit_down::Matrix{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for sunlit leaves at each wavelength\n\n_s_emit_up::Matrix{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for sunlit leaves at each wavelength\n\n_s_shaded_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for shaded leaves at each wavelength\n\n_s_shaded_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for shaded leaves at each wavelength\n\n_s_sunlit_down::Vector{FT} where FT<:AbstractFloat\n\n: Downwelling SIF for sunlit leaves at each wavelength\n\n_s_sunlit_up::Vector{FT} where FT<:AbstractFloat\n\n: Upwelling SIF for sunlit leaves at each wavelength\n\n_sif_obs_shaded::Matrix{FT} where FT<:AbstractFloat\n\n: Cache to compute SIF at observer direction from shaded APAR\n\n_sif_obs_scatter::Matrix{FT} where FT<:AbstractFloat\n\n: Cache to compute SIF at observer direction from scattering\n\n_sif_obs_sunlit::Matrix{FT} where FT<:AbstractFloat\n\n: Cache to compute SIF at observer direction from sunlit APAR\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractLIDFAlgorithm","page":"API","title":"ClimaCache.AbstractLIDFAlgorithm","text":"abstract type AbstractLIDFAlgorithm{FT<:AbstractFloat}\n\nHierarchy of AbstractLIDFAlgorithm:\n\nVerhoefLIDF\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VerhoefLIDF","page":"API","title":"ClimaCache.VerhoefLIDF","text":"mutable struct VerhoefLIDF{FT<:AbstractFloat} <: ClimaCache.AbstractLIDFAlgorithm{FT<:AbstractFloat}\n\nStructure for Verhoef LIDF algorithm\n\nFields\n\nA::AbstractFloat\n\n: Leaf inclination angle distribution function parameter a\n\nB::AbstractFloat\n\n: Leaf inclination angle distribution function parameter b\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractCanopy","page":"API","title":"ClimaCache.AbstractCanopy","text":"abstract type AbstractCanopy{FT<:AbstractFloat}\n\nHierarchy of AbstractCanopy:\n\nBroadbandSLCanopy\nHyperspectralMLCanopy\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSLCanopy","page":"API","title":"ClimaCache.BroadbandSLCanopy","text":"mutable struct BroadbandSLCanopy{FT<:AbstractFloat} <: ClimaCache.AbstractCanopy{FT<:AbstractFloat}\n\nStructure to save single layer broadband canopy parameters\n\nFields\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nLIDF::ClimaCache.VerhoefLIDF\n\n: Leaf inclination angle distribution function algorithm\n\nRADIATION::ClimaCache.BroadbandSLCanopyRadiationProfile\n\n: Canopy radiation profiles\n\nP_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Inclination angle distribution\n\nΘ_INCL_BNDS::Matrix{FT} where FT<:AbstractFloat\n\n: Bounds of inclination angles [°]\n\nΘ_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Mean inclination angles [°]\n\nci::AbstractFloat\n\n: Clumping index\n\nlai::AbstractFloat\n\n: Leaf area index\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralMLCanopy","page":"API","title":"ClimaCache.HyperspectralMLCanopy","text":"mutable struct HyperspectralMLCanopy{FT<:AbstractFloat} <: ClimaCache.AbstractCanopy{FT<:AbstractFloat}\n\nStructure to save multiple layer hyperspectral canopy parameters\n\nFields\n\nDIM_AZI::Int64\n\n: Dimension of azimuth angles\n\nDIM_INCL::Int64\n\n: Dimension of inclination angles\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nHOT_SPOT::AbstractFloat\n\n: Hot spot parameter\n\nLHA::ClimaCache.HyperspectralAbsorption\n\n: Hyperspectral absorption features of different leaf components\n\nLIDF::ClimaCache.VerhoefLIDF\n\n: Leaf inclination angle distribution function algorithm\n\nWLSET::ClimaCache.WaveLengthSet\n\n: Wave length set used to paramertize other variables\n\nOPTICS::ClimaCache.HyperspectralMLCanopyOpticalProperty\n\n: Canopy optical properties\n\nRADIATION::ClimaCache.HyperspectralMLCanopyRadiationProfile\n\n: Canopy radiation profiles\n\nP_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Inclination angle distribution\n\nΘ_AZI::Vector{FT} where FT<:AbstractFloat\n\n: Mean azimuth angles [°]\n\nΘ_INCL_BNDS::Matrix{FT} where FT<:AbstractFloat\n\n: Bounds of inclination angles [°]\n\nΘ_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Mean inclination angles [°]\n\nΩ_A::AbstractFloat\n\n: Clumping structure a\n\nΩ_B::AbstractFloat\n\n: Clumping structure b\n\nci::AbstractFloat\n\n: Clumping index\n\nlai::AbstractFloat\n\n: Leaf area index\n\n_1_AZI::Vector{FT} where FT<:AbstractFloat\n\n: Ones with the length of Θ_AZI\n\n_COS_Θ_AZI::Vector{FT} where FT<:AbstractFloat\n\n: Cosine of Θ_AZI\n\n_COS²_Θ_INCL::Vector{FT} where FT<:AbstractFloat\n\n: Square of cosine of Θ_INCL\n\n_COS²_Θ_INCL_AZI::Matrix{FT} where FT<:AbstractFloat\n\n: Square of cosine of Θ_INCL at different azimuth angles\n\n_x_bnds::Vector{FT} where FT<:AbstractFloat\n\n: Cache for level boundary locations\n\n\n\n\n\n","category":"type"},{"location":"API/#SPAC","page":"API","title":"SPAC","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Root\nStem\nAbstractSPACSystem\nMonoElementSPAC\nMonoMLGrassSPAC\nMonoMLPalmSPAC\nMonoMLTreeSPAC","category":"page"},{"location":"API/#ClimaCache.Root","page":"API","title":"ClimaCache.Root","text":"mutable struct Root{FT<:AbstractFloat}\n\nStructure to save root parameters\n\nFields\n\nHS::ClimaCache.RootHydraulics\n\n: RootHydraulics type root hydraulic system\n\nt::AbstractFloat\n\n: Current temperature [K]\n\ne::AbstractFloat\n\n: Total stored energy in water [J]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Stem","page":"API","title":"ClimaCache.Stem","text":"mutable struct Stem{FT<:AbstractFloat}\n\nStructure to save stem parameters\n\nFields\n\nHS::ClimaCache.StemHydraulics\n\n: StemHydraulics type stem hydraulic system\n\nt::AbstractFloat\n\n: Current temperature\n\ne::AbstractFloat\n\n: Total stored energy in water [J]\n\n∂e∂t::AbstractFloat\n\n: Marginal increase in energy [W]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractSPACSystem","page":"API","title":"ClimaCache.AbstractSPACSystem","text":"abstract type AbstractSPACSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractSPACSystem:\n\nMonoElementSPAC\nMonoMLGrassSPAC\nMonoMLPalmSPAC\nMonoMLTreeSPAC\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoElementSPAC","page":"API","title":"ClimaCache.MonoElementSPAC","text":"mutable struct MonoElementSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for simplest SPAC system\n\nFields\n\nAIR::ClimaCache.AirLayer\n\n: Air conditions\n\nLEAF::ClimaCache.Leaf\n\n: Leaf system\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nROOT::ClimaCache.Root\n\n: Root system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\nSTEM::ClimaCache.Stem\n\n: Stem system\n\n_krs::Vector{FT} where FT<:AbstractFloat\n\n: Relative hydraulic conductance\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoMLGrassSPAC","page":"API","title":"ClimaCache.MonoMLGrassSPAC","text":"mutable struct MonoMLGrassSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for monospecies grass SPAC system\n\nFields\n\nDIM_AIR::Int64\n\n: Dimension of air layers\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_ROOT::Int64\n\n: Dimension of root layers\n\nΦ_PHOTON::Bool\n\n: Whether to convert energy to photons when computing fluorescence\n\nELEVATION::AbstractFloat\n\n: Elevation\n\nLATITUDE::AbstractFloat\n\n: Latitude\n\nLONGITUDE::AbstractFloat\n\n: Longitude\n\nLEAVES_INDEX::Vector{Int64}\n\n: Corresponding air layer per canopy layer\n\nROOTS_INDEX::Vector{Int64}\n\n: Corresponding soil layer per root layer\n\nZ::Vector{FT} where FT<:AbstractFloat\n\n: Depth and height information [m]\n\nZ_AIR::Vector{FT} where FT<:AbstractFloat\n\n: Air boundaries [m]\n\nAIR::Array{ClimaCache.AirLayer{FT}, 1} where FT<:AbstractFloat\n\n: Air for each layer (may be more than canopy layer)\n\nANGLES::ClimaCache.SunSensorGeometry\n\n: Sun sensor geometry\n\nCANOPY::ClimaCache.HyperspectralMLCanopy\n\n: Canopy used for radiation calculations\n\nLEAVES::Array{ClimaCache.Leaves2D{FT}, 1} where FT<:AbstractFloat\n\n: Leaf per layer\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nRAD_LW::AbstractFloat\n\n: Downwelling longwave radiation [W m⁻²]\n\nRAD_SW::ClimaCache.HyperspectralRadiation\n\n: Downwelling shortwave radiation\n\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT<:AbstractFloat\n\n: Root hydraulic system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\n_fs::Vector{FT} where FT<:AbstractFloat\n\n: Flow rate per root layer\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Conductances for each root layer at given flow\n\n_ps::Vector{FT} where FT<:AbstractFloat\n\n: Pressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoMLPalmSPAC","page":"API","title":"ClimaCache.MonoMLPalmSPAC","text":"mutable struct MonoMLPalmSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for monospecies palm SPAC system (with trunk)\n\nFields\n\nDIM_AIR::Int64\n\n: Dimension of air layers\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_ROOT::Int64\n\n: Dimension of root layers\n\nΦ_PHOTON::Bool\n\n: Whether to convert energy to photons when computing fluorescence\n\nELEVATION::AbstractFloat\n\n: Elevation\n\nLATITUDE::AbstractFloat\n\n: Latitude\n\nLONGITUDE::AbstractFloat\n\n: Longitude\n\nLEAVES_INDEX::Vector{Int64}\n\n: Corresponding air layer per canopy layer\n\nROOTS_INDEX::Vector{Int64}\n\n: Corresponding soil layer per root layer\n\nZ::Vector{FT} where FT<:AbstractFloat\n\n: Depth and height information [m]\n\nZ_AIR::Vector{FT} where FT<:AbstractFloat\n\n: Air boundaries [m]\n\nAIR::Array{ClimaCache.AirLayer{FT}, 1} where FT<:AbstractFloat\n\n: Air for each layer (more than canopy layer)\n\nANGLES::ClimaCache.SunSensorGeometry\n\n: Sun sensor geometry\n\nCANOPY::ClimaCache.HyperspectralMLCanopy\n\n: Canopy used for radiation calculations\n\nLEAVES::Array{ClimaCache.Leaves2D{FT}, 1} where FT<:AbstractFloat\n\n: Leaf per layer\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nRAD_LW::AbstractFloat\n\n: Downwelling longwave radiation [W m⁻²]\n\nRAD_SW::ClimaCache.HyperspectralRadiation\n\n: Downwelling shortwave radiation\n\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT<:AbstractFloat\n\n: Root hydraulic system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\nTRUNK::ClimaCache.Stem\n\n: Trunk hydraulic system\n\n_fs::Vector{FT} where FT<:AbstractFloat\n\n: Flow rate per root layer\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Conductances for each root layer at given flow\n\n_ps::Vector{FT} where FT<:AbstractFloat\n\n: Pressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoMLTreeSPAC","page":"API","title":"ClimaCache.MonoMLTreeSPAC","text":"mutable struct MonoMLTreeSPAC{FT<:AbstractFloat} <: ClimaCache.AbstractSPACSystem{FT<:AbstractFloat}\n\nStruct for monospecies tree SPAC system (with trunk and branches)\n\nFields\n\nDIM_AIR::Int64\n\n: Dimension of air layers\n\nDIM_LAYER::Int64\n\n: Dimension of canopy layers\n\nDIM_ROOT::Int64\n\n: Dimension of root layers\n\nΦ_PHOTON::Bool\n\n: Whether to convert energy to photons when computing fluorescence\n\nLEAVES_INDEX::Vector{Int64}\n\n: Corresponding air layer per canopy layer\n\nROOTS_INDEX::Vector{Int64}\n\n: Corresponding soil layer per root layer\n\nZ::Vector{FT} where FT<:AbstractFloat\n\n: Depth and height information [m]\n\nZ_AIR::Vector{FT} where FT<:AbstractFloat\n\n: Air boundaries [m]\n\nELEVATION::AbstractFloat\n\n: Elevation\n\nLATITUDE::AbstractFloat\n\n: Latitude\n\nLONGITUDE::AbstractFloat\n\n: Longitude\n\nAIR::Array{ClimaCache.AirLayer{FT}, 1} where FT<:AbstractFloat\n\n: Air for each layer (more than canopy layer)\n\nANGLES::ClimaCache.SunSensorGeometry\n\n: Sun sensor geometry\n\nBRANCHES::Array{ClimaCache.Stem{FT}, 1} where FT<:AbstractFloat\n\n: Branch hydraulic system\n\nCANOPY::ClimaCache.HyperspectralMLCanopy\n\n: Canopy used for radiation calculations\n\nLEAVES::Array{ClimaCache.Leaves2D{FT}, 1} where FT<:AbstractFloat\n\n: Leaf per layer\n\nMETEO::ClimaCache.Meteorology\n\n: Meteorology information\n\nRAD_LW::AbstractFloat\n\n: Downwelling longwave radiation [W m⁻²]\n\nRAD_SW::ClimaCache.HyperspectralRadiation\n\n: Downwelling shortwave radiation\n\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT<:AbstractFloat\n\n: Root hydraulic system\n\nSOIL::ClimaCache.Soil\n\n: Soil component\n\nTRUNK::ClimaCache.Stem\n\n: Trunk hydraulic system\n\n_fs::Vector{FT} where FT<:AbstractFloat\n\n: Flow rate per root layer\n\n_ks::Vector{FT} where FT<:AbstractFloat\n\n: Conductances for each root layer at given flow\n\n_ps::Vector{FT} where FT<:AbstractFloat\n\n: Pressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"API/#Colimitation-Methods","page":"API","title":"Colimitation Methods","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractColimit\nMinimumColimit\nQuadraticColimit\nSerialColimit\nSquareColimit","category":"page"},{"location":"API/#ClimaCache.AbstractColimit","page":"API","title":"ClimaCache.AbstractColimit","text":"abstract type AbstractColimit{FT<:AbstractFloat}\n\nHierarchy of AbstractColimit\n\nMinimumColimit\nQuadraticColimit\nSerialColimit\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MinimumColimit","page":"API","title":"ClimaCache.MinimumColimit","text":"Empty structure to indicate minimum colimitation: x = min(x₁, x₂) \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.QuadraticColimit","page":"API","title":"ClimaCache.QuadraticColimit","text":"Structure to indicate quadratic colimitation (contains field CURVATURE): θ⋅x² - (x₁ + x₂)⋅x + x₁x₂ = 0 \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SerialColimit","page":"API","title":"ClimaCache.SerialColimit","text":"Empty structure to indicate serial colimitation: x = 1 / (1/x₁ + 1/x₂) \n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SquareColimit","page":"API","title":"ClimaCache.SquareColimit","text":"Empty structure to indicate square colimitation: x = x₁⋅x₂ / sqrt(x₁² + x₂²) \n\n\n\n\n\n","category":"type"}]
}
