var documenterSearchIndex = {"docs":
[{"location":"#ClimaCache.jl","page":"Home","title":"ClimaCache.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cache system for CliMA Land model.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg;\nPkg.add(\"ClimaCache\");","category":"page"},{"location":"API/#ClimaCache","page":"API","title":"ClimaCache","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = ClimaCache","category":"page"},{"location":"API/#Air","page":"API","title":"Air","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AirLayer\nAirLayer{FT}() where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AirLayer","page":"API","title":"ClimaCache.AirLayer","text":"mutable struct AirLayer{FT<:AbstractFloat}\n\nStructure that stores air layer information\n\nFields\n\nP_AIR::AbstractFloat\nAtmospheric pressure [Pa]\nP_O₂::AbstractFloat\nO₂ partial pressure [Pa]\np_CO₂::AbstractFloat\nCO₂ partial pressure [Pa]\np_H₂O::AbstractFloat\nH₂O partial pressure [Pa]\nt::AbstractFloat\nTemperature\nwind::AbstractFloat\nWind speed [m s⁻¹]\np_H₂O_sat::AbstractFloat\nSaturated H₂O partial pressure [Pa]\nrh::AbstractFloat\nrelative humidity\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AirLayer-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.AirLayer","text":"AirLayer{FT}() where {FT<:AbstractFloat}\n\nConstructor for AirLayer\n\n\n\nExamples\n\nair = AirLayer{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#Plant","page":"API","title":"Plant","text":"","category":"section"},{"location":"API/#Hydraulics","page":"API","title":"Hydraulics","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractPVCurve\nLinearPVCurve\nLinearPVCurve{FT}() where {FT<:AbstractFloat}\nSegmentedPVCurve\nSegmentedPVCurve{FT}() where {FT<:AbstractFloat}\nAbstractHydraulicSystem\nAbstractXylemVC\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\nAbstractFlowProfile\nNonSteadyStateFlow\nNonSteadyStateFlow{FT}(N::Int, isleaf::Bool = true) where {FT<:AbstractFloat}\nSteadyStateFlow\nLeafHydraulics\nLeafHydraulics{FT}(N::Int = 5; area::Number = 1500, k_ox::Number = 100, k_sla::Number = 0.04, v_max::Number = 20, ssm::Bool = true) where {FT<:AbstractFloat}\nRootHydraulics\nRootHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}\nStemHydraulics\nStemHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AbstractPVCurve","page":"API","title":"ClimaCache.AbstractPVCurve","text":"abstract type AbstractPVCurve{FT<:AbstractFloat}\n\nHierarchy of AbstractPVCurve:\n\nLinearPVCurve\nSegmentedPVCurve\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LinearPVCurve","page":"API","title":"ClimaCache.LinearPVCurve","text":"mutable struct LinearPVCurve{FT<:AbstractFloat} <: ClimaCache.AbstractPVCurve{FT<:AbstractFloat}\n\nStruct that contains information for linear PV curve\n\nFields\n\nK_REFILL::AbstractFloat\nConductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\nSLOPE::AbstractFloat\nSlope of the linear PV curve (relative to maximum) [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LinearPVCurve-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.LinearPVCurve","text":"LinearPVCurve{FT}() where {FT<:AbstractFloat}\n\nConstructor for LinearPVCurve\n\n\n\nExamples\n\npvc = LinearPVCurve{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.SegmentedPVCurve","page":"API","title":"ClimaCache.SegmentedPVCurve","text":"mutable struct SegmentedPVCurve{FT} <: ClimaCache.AbstractPVCurve{FT}\n\nStruct that contains information for segmented PV curve\n\nFields\n\nC_ALL::Any\nn_o / maximum V [mol m⁻³]\nK_REFILL::Any\nConductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\nRWC_APO::Any\nApoplastic water content relative to maximum water volume\nRWC_TLP::Any\nRelative water content at turgor loss point\nΕ_BULK::Any\nBulk modulus of elasticity [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SegmentedPVCurve-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.SegmentedPVCurve","text":"SegmentedPVCurve{FT}() where {FT<:AbstractFloat}\n\nConstructor for SegmentedPVCurve\n\n\n\nExamples\n\npvc = SegmentedPVCurve{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractHydraulicSystem","page":"API","title":"ClimaCache.AbstractHydraulicSystem","text":"abstract type AbstractHydraulicSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractHydraulicSystem:\n\nLeafHydraulics\nRootHydraulics\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractXylemVC","page":"API","title":"ClimaCache.AbstractXylemVC","text":"abstract type AbstractXylemVC{FT<:AbstractFloat}\n\nHierarchy of AbstractXylemVC:\n\nLogisticVC\nPowerVC\nWeibullVC\nComplexVC\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LogisticVC","page":"API","title":"ClimaCache.LogisticVC","text":"mutable struct LogisticVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nModified logistic function for vulnerability curve\n\nFields\n\nA::AbstractFloat\nMultiplier to exponential component\nB::AbstractFloat\nMultiplier to pressure [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.PowerVC","page":"API","title":"ClimaCache.PowerVC","text":"mutable struct PowerVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nPower function for vulnerability curve\n\nFields\n\nA::AbstractFloat\nMultiplier to power component [MPa⁻ᵇ]\nB::AbstractFloat\nPower to pressure\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WeibullVC","page":"API","title":"ClimaCache.WeibullVC","text":"mutable struct WeibullVC{FT<:AbstractFloat} <: ClimaCache.AbstractXylemVC{FT<:AbstractFloat}\n\nWeibull cumulative distribution function for vulnerability curve\n\nFields\n\nB::AbstractFloat\nNumerator in the exponential component [MPa]\nC::AbstractFloat\nPower to pressure component\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.ComplexVC","page":"API","title":"ClimaCache.ComplexVC","text":"mutable struct ComplexVC{FT} <: ClimaCache.AbstractXylemVC{FT}\n\nA complex struct for segmented vulnerability curve such as dual Weibull function\n\nFields\n\nPS::Vector\nPercentages of each VC component\nVCS::Union{Array{ClimaCache.AbstractXylemVC{FT}, 1}, Array{ClimaCache.LogisticVC{FT}, 1}, Array{ClimaCache.PowerVC{FT}, 1}, Array{ClimaCache.WeibullVC{FT}, 1}} where FT\nVector of vulnerability curve components\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractFlowProfile","page":"API","title":"ClimaCache.AbstractFlowProfile","text":"abstract type AbstractFlowProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractFlowProfile:\n\nNonSteadyStateFlow\nSteadyStateFlow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.NonSteadyStateFlow","page":"API","title":"ClimaCache.NonSteadyStateFlow","text":"mutable struct NonSteadyStateFlow{FT} <: ClimaCache.AbstractFlowProfile{FT}\n\nStruct that contains stem hydraulic system flow rates at non-steady state\n\nFields\n\nf_buffer::Vector\nVector of buffer water flow [mol m⁻²]\nf_element::Vector\nVector of xylem water flow [mol m⁻²]\nf_in::Any\nFlow rate in [mol s⁻¹] or [mol m⁻² s⁻¹] (for leaf)\nf_out::Any\nFlow rate out [mol s⁻¹] or [mol m⁻² s⁻¹] (for leaf)\nf_sum::Vector\nVector of sum buffer water flow [mol m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.NonSteadyStateFlow-Union{Tuple{Int64}, Tuple{Int64, Bool}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.NonSteadyStateFlow","text":"NonSteadyStateFlow{FT}(N::Int, isleaf::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a non-steady state flow struct, given\n\nN Number of buffer rates from capaciatance (always 1 for Leaf)\nisleaf Bool to indicate if the organ is a leaf\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.SteadyStateFlow","page":"API","title":"ClimaCache.SteadyStateFlow","text":"mutable struct SteadyStateFlow{FT} <: ClimaCache.AbstractFlowProfile{FT}\n\nStruct that contains stem hydraulic system flow rates at steady state\n\nFields\n\nflow::Any\nFlow rate [mol s⁻¹] or [mol m⁻² s⁻¹] (for leaf)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafHydraulics","page":"API","title":"ClimaCache.LeafHydraulics","text":"mutable struct LeafHydraulics{FT} <: ClimaCache.AbstractHydraulicSystem{FT}\n\nStruct that contains leaf hydraulic system\n\nFields\n\nAREA::Any\nLeaf area\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT\nFlow profile\nK_OX::Any\nMaximal extra-xylary hydraulic conductance [mol s⁻¹ MPa⁻¹ m⁻²]\nK_SLA::Any\nMaximal leaf xylem hydraulic conductance per leaf area [mol s⁻¹ MPa⁻¹ m⁻²]\nN::Int64\nNumber of xylem slices\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT\nPressure volume curve for storage\nV_MAXIMUM::Any\nTotal capaciatance at Ψ = 0 [mol m⁻²]\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT\nVulnerability curve\np_dos::Any\nLeaf xylem water pressure at the downstream end of leaf xylem [MPa]\np_leaf::Any\nLeaf end water pressure at air-water interface [MPa]\np_storage::Any\nPressure of storage\np_ups::Any\nLeaf xylem water pressure at the leaf base (upstream) [MPa]\nv_storage::Any\nCurrent capaciatance at Ψ_leaf [mol m⁻²]\nk_history::Vector\nVector of leaf kr history per element\np_element::Vector\nVector of xylem water pressure [MPa]\np_history::Vector\nVector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafHydraulics-Union{Tuple{}, Tuple{Int64}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.LeafHydraulics","text":"LeafHydraulics{FT}(N::Int = 5; area::Number = 1500, k_ox::Number = 100, k_sla::Number = 0.04, v_max::Number = 20, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for leaf hydraulic system, given\n\nN Number of xylem slices in the system, default is 5\narea Leaf area\nk_ox Maximum extraxylary hydraulic conductance per leaf area\nk_sla Maximum leaf xylem hydraulic conductance per leaf area\nv_max Total water capacitance at Ψ = 0 per leaf area\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nlhs = LeafHydraulics{Float64}();\nlhs = LeafHydraulics{Float64}(N = 5);\nlhs = LeafHydraulics{Float64}(N = 5; area = 20, k_ox = 50, k_sla = 0.1, v_max = 20, ssm = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.RootHydraulics","page":"API","title":"ClimaCache.RootHydraulics","text":"mutable struct RootHydraulics{FT} <: ClimaCache.AbstractHydraulicSystem{FT}\n\nStruct that contains root hydraulic system\n\nFields\n\nAREA::Any\nRoot cross-section area [m²]\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT\nFlow profile\nK_MAX::Any\nMaximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nK_RHIZ::Any\nRhizosphere  conductance [mol s⁻¹ MPa⁻¹]\nK_X::Any\nMaximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\nL::Any\nLength [m]\nN::Int64\nNumber of xylem slices\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT\nPressure volume curve for storage\nSH::Union{ClimaCache.BrooksCorey{FT}, ClimaCache.VanGenuchten{FT}} where FT\nSoil hydraulics\nV_MAXIMUM::Vector\nMaximal storage per element [mol]\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT\nVulnerability curve\nΔH::Any\nRoot z difference [m]\np_dos::Any\nXylem water pressure at the downstream end of xylem [MPa]\np_rhiz::Any\nXylem-rhizosphere interface water pressure [MPa]\np_storage::Vector\nPressure of storage per element\np_ups::Any\nSoil matrix potential [MPa]\nv_storage::Vector\nStorage per element [mol]\nψ_osm::Any\nSoil osmotic potential at 298.15 K `[MPa]\nk_history::Vector\nVector of leaf kr history per element\np_element::Vector\nVector of xylem water pressure [MPa]\np_history::Vector\nVector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.RootHydraulics-Union{Tuple{}, Tuple{Int64}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.RootHydraulics","text":"RootHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for root hydraulic system, given\n\nN Number of xylem slices in the system, default is 5\narea Root crosssection area\nk_x Maximum root xylem hydraulic conductivity per crosssection area per root length\nΔh Root depth\nΔl Root length\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nrhs = RootHydraulics{Float64}();\nrhs = RootHydraulics{Float64}(N = 5);\nrhs = RootHydraulics{Float64}(N = 5; area = 1, k_x = 50, Δh = 1, Δl = 2, ssm = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.StemHydraulics","page":"API","title":"ClimaCache.StemHydraulics","text":"mutable struct StemHydraulics{FT} <: ClimaCache.AbstractHydraulicSystem{FT}\n\nStruct that contains stem hydraulic system\n\nFields\n\nAREA::Any\nRoot cross-section area [m²]\nFLOW::Union{ClimaCache.NonSteadyStateFlow{FT}, ClimaCache.SteadyStateFlow{FT}} where FT\nFlow profile\nK_MAX::Any\nMaximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nK_X::Any\nMaximal xylem hydraulic conductivity (per root depth) [mol s⁻¹ MPa⁻¹ m⁻²]\nL::Any\nLength [m]\nN::Int64\nNumber of xylem slices\nPVC::Union{ClimaCache.LinearPVCurve{FT}, ClimaCache.SegmentedPVCurve{FT}} where FT\nPressure volume curve for storage\nV_MAXIMUM::Vector\nMaximal storage per element [mol]\nVC::Union{ClimaCache.ComplexVC{FT}, ClimaCache.LogisticVC{FT}, ClimaCache.PowerVC{FT}, ClimaCache.WeibullVC{FT}} where FT\nVulnerability curve\nΔH::Any\nRoot z difference [m]\np_dos::Any\nXylem water pressure at the downstream end of xylem [MPa]\np_storage::Vector\nPressure of storage per element\np_ups::Any\nSoil matrix potential [MPa]\nv_storage::Vector\nStorage per element [mol]\nk_history::Vector\nVector of leaf kr history per element\np_element::Vector\nVector of xylem water pressure [MPa]\np_history::Vector\nVector of xylem water pressure history (normalized to 298.15 K) [MPa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.StemHydraulics-Union{Tuple{}, Tuple{Int64}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.StemHydraulics","text":"StemHydraulics{FT}(N::Int = 5; area::Number = 1, k_x::Number = 25, Δh::Number = 1, Δl::Number = 1, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for stem hydraulic system, given\n\nN Number of xylem slices in the system, default is 5\narea Root crosssection area\nk_x Maximum stem xylem hydraulic conductivity per crosssection area per stem length\nΔh Stem height\nΔl Stem length\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nrhs = StemHydraulics{Float64}();\nrhs = StemHydraulics{Float64}(N = 5);\nrhs = StemHydraulics{Float64}(N = 5; area = 1, k_x = 50, Δh = 2, ssm = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#Leaf-Level","page":"API","title":"Leaf Level","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Leaf\nLeaf{FT}(psm::String, wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); broadband::Bool = false, colimit::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\nAbstractLeafBiophysics\nBroadbandLeafBiophysics\nBroadbandLeafBiophysics{FT}() where {FT<:AbstractFloat}\nHyperspectralLeafBiophysics\nHyperspectralLeafBiophysics{FT}(wls::WaveLengthSet{FT} = WaveLengthSet{FT}()) where {FT<:AbstractFloat}\nVanDerTolFluorescenceModel\nVanDerTolFluorescenceModel{FT}(drought::Bool = false) where {FT<:AbstractFloat}\nAbstractReactionCenter\nVJPReactionCenter\nVJPReactionCenter{FT}() where {FT<:AbstractFloat}\nCytochromeReactionCenter\nCytochromeReactionCenter{FT}() where {FT<:AbstractFloat}\nAbstractPhotosynthesisModel\nC3CytochromeModel\nC3CytochromeModel{FT}(; v_cmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\nC3VJPModel\nC3VJPModel{FT}(; v_cmax25::Number = 50, j_max25::Number = 83.5, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\nC4VJPModel\nC4VJPModel{FT}(; v_cmax25::Number = 50, v_pmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\nAbstractPhotosynthesisMode\nGCO₂Mode\nPCO₂Mode\nAbstractColimit\nMinimumColimit\nQuadraticColimit\nSerialColimit\nAbstractTemperatureDependency\nArrhenius\nArrheniusPeak\nQ10","category":"page"},{"location":"API/#ClimaCache.Leaf","page":"API","title":"ClimaCache.Leaf","text":"mutable struct Leaf{FT<:AbstractFloat}\n\nStructure to save leaf parameters\n\nFields\n\nBIO::Union{ClimaCache.BroadbandLeafBiophysics{FT}, ClimaCache.HyperspectralLeafBiophysics{FT}} where FT<:AbstractFloat\nAbstractLeafBiophysics type leaf biophysical parameters\nHS::ClimaCache.LeafHydraulics{FT} where FT<:AbstractFloat\nLeafHydraulics type leaf hydraulic system\nPRC::Union{ClimaCache.CytochromeReactionCenter{FT}, ClimaCache.VJPReactionCenter{FT}} where FT<:AbstractFloat\nAbstractReactionCenter type photosynthesis reaction center\nPSM::Union{ClimaCache.C3CytochromeModel{FT}, ClimaCache.C3VJPModel{FT}, ClimaCache.C4VJPModel{FT}} where FT<:AbstractFloat\nAbstractPhotosynthesisModel type photosynthesis model\nWIDTH::AbstractFloat\nLeaf width\napar::AbstractFloat\nAbsorbed photosynthetically active radiation [μmol m⁻² s⁻¹]\ng_H₂O_s::AbstractFloat\nStomatal conductance to water vapor [mol m⁻² s⁻¹]\nt::AbstractFloat\nCurrent leaf temperature\ng_CO₂::AbstractFloat\nTotal leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\ng_CO₂_b::AbstractFloat\nBoundary leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\np_CO₂_i::AbstractFloat\nLeaf internal CO₂ partial pressure [Pa]\np_CO₂_s::AbstractFloat\nLeaf surface CO₂ partial pressure [Pa]\np_H₂O_sat::AbstractFloat\nSaturation H₂O vapor pressure, need to update with temperature and leaf water pressure [Pa]\n_t::AbstractFloat\nLast leaf temperature. If different from t, then make temperature correction\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Leaf-Union{Tuple{String}, Tuple{FT}, Tuple{String, ClimaCache.WaveLengthSet{FT}}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Leaf","text":"Leaf{FT}(psm::String, wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); broadband::Bool = false, colimit::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for Leaf, given\n\npsm Photosynthesis model type, must be C3, C3Cytochrome, or C4\nwls WaveLengthSet type structure that determines the dimensions of leaf parameters\nbroadband Whether leaf biophysics is in broadband mode\ncolimit Whether to colimit the photosynthetic rates and electron transport rates\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nleaf_c3 = Leaf{Float64}(\"C3\");\nleaf_c4 = Leaf{Float64}(\"C4\");\nleaf_cy = Leaf{Float64}(\"C3Cytochrome\");\nleaf_c3 = Leaf{Float64}(\"C3\"; colimit = true);\nleaf_c4 = Leaf{Float64}(\"C4\"; colimit = true);\nleaf_cy = Leaf{Float64}(\"C3Cytochrome\"; colimit = true);\nwls = WaveLengthSet{FT}(collect(400:10:2500));\nleaf_c3 = Leaf{Float64}(\"C3\", wls);\nleaf_c4 = Leaf{Float64}(\"C4\", wls);\nleaf_cy = Leaf{Float64}(\"C3Cytochrome\", wls);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractLeafBiophysics","page":"API","title":"ClimaCache.AbstractLeafBiophysics","text":"abstract type AbstractLeafBiophysics{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilAlbedo:\n\nBroadbandLeafBiophysics\nHyperspectralLeafBiophysics\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandLeafBiophysics","page":"API","title":"ClimaCache.BroadbandLeafBiophysics","text":"mutable struct BroadbandLeafBiophysics{FT} <: ClimaCache.AbstractLeafBiophysics{FT}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nΑ_NIR::Any\nBroadband absorption fraction at the NIR region\nΑ_PAR::Any\nBroadband absorption fraction at the PAR region\nΕ_LW::Any\nEmissivity for longwave radiation\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandLeafBiophysics-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.BroadbandLeafBiophysics","text":"BroadbandLeafBiophysics{FT}() where {FT<:AbstractFloat}\n\nConstruct a broadband leaf biophysics struct\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralLeafBiophysics","page":"API","title":"ClimaCache.HyperspectralLeafBiophysics","text":"mutable struct HyperspectralLeafBiophysics{FT} <: ClimaCache.AbstractLeafBiophysics{FT}\n\nStruct that contains leaf biophysical traits used to run leaf reflectance and transmittance.\n\nFields\n\nMESOPHYLL_N::Any\nLeaf mesophyll structural parameter that describes mesophyll reflectance and transmittance\nNDUB::Int64\nDoubling adding layers\nant::Any\nAnthocyanin content [μg cm⁻²]\nbrown::Any\nSenescent material (brown pigments) fraction [-]\ncab::Any\nChlorophyll a and b content [μg cm⁻²]\ncar::Any\nCarotenoid content [μg cm⁻²]\ncbc::Any\nCarbon-based constituents in lma [g cm⁻²]\nf_zeax::Any\nZeaxanthin fraction in Carotenoid (1=all Zeaxanthin, 0=all Violaxanthin) [-]\nl_H₂O::Any\nEquivalent water thickness [cm]\nlma::Any\nDry matter content (dry leaf mass per unit area) [g cm⁻²]\npro::Any\nProtein content in lma (pro = lma - cbc) [g cm⁻²]\nk_all::Vector\nSpecific absorption coefficients of all materials\nmat_b::Matrix\nFluorescence excitation matrix backwards [-]\nmat_f::Matrix\nFluorescence excitation matrix forwards [-]\nα_cab::Vector\nRelative absorption by Chlorophyll [-]\nα_cabcar::Vector\nRelative absorption by Chlorophyll+Carotenoid [-]\nα_sw::Vector\nShortwave absorption, 1 .- ρsw .- τsw  [-]\nρ_lw::Any\nBroadband thermal reflectance, related to blackbody emittance [-]\nρ_sw::Vector\nShortwave leaf reflectance [-]\nτ_lw::Any\nBroadband thermal transmission, related to blackbody emittance [-]\nτ_sw::Vector\nShortwave leaf transmission [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralLeafBiophysics-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralLeafBiophysics","text":"HyperspectralLeafBiophysics{FT}(wls::WaveLengthSet{FT} = WaveLengthSet{FT}()) where {FT<:AbstractFloat}\n\nConstructor for HyperspectralLeafBiophysics, given\n\nwls WaveLengthSet type structure\n\n\n\nExamples\n\nlbio = HyperspectralLeafBiophysics{Float64}();\nlbio = HyperspectralLeafBiophysics{Float64}(WaveLengthSet{Float64}(collect(400:50:2400)));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.VanDerTolFluorescenceModel","page":"API","title":"ClimaCache.VanDerTolFluorescenceModel","text":"struct VanDerTolFluorescenceModel{FT<:AbstractFloat}\n\nStructure that stores van der Tol et al. (2014) fluorescence model parameters.\n\nFields\n\nK_0::AbstractFloat\nFitting parameter K_0\nK_A::AbstractFloat\nFitting parameter α\nK_B::AbstractFloat\nFitting parameter β\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanDerTolFluorescenceModel-Union{Tuple{}, Tuple{Bool}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanDerTolFluorescenceModel","text":"VanDerTolFluorescenceModel{FT}(drought::Bool = true) where {FT<:AbstractFloat}\n\nConstructor for VanDerTolFluorescenceModel fluorescence model, given\n\ndrought If true, use parameters trained from drought stressed plant. Default is true.\n\n\n\nExamples\n\nvdt = VanDerTolFluorescenceModel{Float64}();\nvdt = VanDerTolFluorescenceModel{Float64}(false);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractReactionCenter","page":"API","title":"ClimaCache.AbstractReactionCenter","text":"abstract type AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nHierarchy of the AbstractReactionCenter\n\nVJPReactionCenter\nCytochromeReactionCenter\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VJPReactionCenter","page":"API","title":"ClimaCache.VJPReactionCenter","text":"mutable struct VJPReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSII::AbstractFloat\nFraction of absorbed light used by PSII ETR\nFLM::ClimaCache.VanDerTolFluorescenceModel\nFluorescence model\nK_D::AbstractFloat\nRate constant for thermal dissipation\nK_F::AbstractFloat\nRate constant for fluorescence\nK_P_MAX::AbstractFloat\nMaximal rate constant for photochemistry\nΦ_PSII_MAX::AbstractFloat\nmax PSII yield (knpqr=0, all RC open)\nk_npq_rev::AbstractFloat\nReversible NPQ rate constant (initially zero)\nk_npq_sus::AbstractFloat\nSustained NPQ rate constant (for seasonal changes, default is zero)\nk_p::AbstractFloat\nRate constant for photochemistry\nnpq::AbstractFloat\nNon-Photochemical quenching\nϕ_f::AbstractFloat\nFluorescence yield\nϕ_p::AbstractFloat\nPhotochemical yield\nf_m::AbstractFloat\nDark adapted yield (Kp=0)\nf_m′::AbstractFloat\nLight adapted yield (Kp=0)\nf_o::AbstractFloat\nDark-adapted fluorescence yield (Kp=max)\nf_o′::AbstractFloat\nLight-adapted fluorescence yield in the dark (Kp=max)\nq_e::AbstractFloat\nEnergy quenching\nq_p::AbstractFloat\nPhotochemical quenching\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VJPReactionCenter-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VJPReactionCenter","text":"VJPReactionCenter{FT}() where {FT<:AbstractFloat}\n\nConstructor of VJPReactionCenter\n\n\n\nExamples\n\nrc = VJPReactionCenter{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.CytochromeReactionCenter","page":"API","title":"ClimaCache.CytochromeReactionCenter","text":"mutable struct CytochromeReactionCenter{FT<:AbstractFloat} <: ClimaCache.AbstractReactionCenter{FT<:AbstractFloat}\n\nStructure that stores reaction center information\n\nFields\n\nF_PSI::AbstractFloat\nFraction of absorbed light used by PSI ETR\nK_D::AbstractFloat\nRate constant of consititutive heat loss from the antennae [ns⁻¹]\nK_F::AbstractFloat\nRate constant of fluorescence [ns⁻¹]\nK_PSI::AbstractFloat\nRate constant of photochemistry for PS I [ns⁻¹]\nK_PSII::AbstractFloat\nRate constant of photochemistry for PS II [ns⁻¹]\nK_U::AbstractFloat\nRate constant of excitation sharing for PS II [ns⁻¹]\nK_X::AbstractFloat\nRate constant of regulated heat loss via oxidized PS I center [s⁻¹]\nΦ_PSI_MAX::AbstractFloat\nMaximal PS I photochemical yield\nϵ_1::AbstractFloat\nWeight factor that PSI fluorescence reaches sensor (after reabsorption)\nϵ_2::AbstractFloat\nWeight factor that PSII fluorescence reaches sensor (after reabsorption)\nϕ_f::AbstractFloat\nFluorescence yield\nϕ_p::AbstractFloat\nPhotochemical yield\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.CytochromeReactionCenter-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.CytochromeReactionCenter","text":"CytochromeReactionCenter{FT}() where {FT<:AbstractFloat}\n\nConstructor of CytochromeReactionCenter\n\n\n\nExamples\n\nrc = CytochromeReactionCenter{Float64}();\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractPhotosynthesisModel","page":"API","title":"ClimaCache.AbstractPhotosynthesisModel","text":"abstract type AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nHierarchy of AbstractPhotosynthesisModel:\n\nC3CytochromeModel\nC3VJPModel\nC4VJPModel\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3CytochromeModel","page":"API","title":"ClimaCache.C3CytochromeModel","text":"mutable struct C3CytochromeModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 Cytochrome photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for Ac and Aj => Ai\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for Ai and Ap => Ag\nCOLIMIT_J::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for J\nEFF_1::AbstractFloat\nCoefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEFF_2::AbstractFloat\nCoefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\nTD_KC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Kc temperature dependency\nTD_KO::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Ko temperature dependency\nTD_KQ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Kq temperature dependency\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type respiration temperature dependency\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Vcmax temperature dependency\nTD_Γ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Γ* temperature dependency\nTD_ΗC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Η_C temperature dependency\nTD_ΗL::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Η_L temperature dependency\nb₆f::AbstractFloat\nTotal concentration of Cytochrome b₆f [μmol m⁻²]\nr_d25::AbstractFloat\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25::AbstractFloat\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25_ww::AbstractFloat\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\na_c::AbstractFloat\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\na_gross::AbstractFloat\nGross photosynthetic rate [μmol m⁻² s⁻¹]\na_j::AbstractFloat\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\na_net::AbstractFloat\nNet photosynthetic rate [μmol m⁻² s⁻¹]\na_p::AbstractFloat\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\ne_to_c::AbstractFloat\nElectron to CO₂ coefficient\nj_pot::AbstractFloat\nPotential Electron Transport Rate [μmol e⁻ m⁻² s⁻¹]\nj_psi::AbstractFloat\nPSI electron transport rate after colimitation\nk_c::AbstractFloat\nRubisCO coefficient Kc [Pa]\nk_m::AbstractFloat\nMichaelis-Menten's coefficient [Pa]\nk_o::AbstractFloat\nRubisCO coefficient Ko [Pa]\nk_q::AbstractFloat\nMaximal turnover rate of Cytochrome b₆f [e⁻ s⁻¹]\nr_d::AbstractFloat\nRespiration rate at leaf temperature [μmol m⁻² s⁻¹]\nv_cmax::AbstractFloat\nMaximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\nv_qmax::AbstractFloat\nMaximal Cytochrome b₆f activity [μmol e⁻ m⁻² s⁻¹]\nη::AbstractFloat\nratio between JP700 and JP680\nη_c::AbstractFloat\nCoupling efficiency of cyclic electron flow [mol ATP mol⁻¹ e⁻]\nη_l::AbstractFloat\nCoupling efficiency of linear electron flow [mol ATP mol⁻¹ e⁻]\nγ_star::AbstractFloat\nCO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3CytochromeModel-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C3CytochromeModel","text":"C3CytochromeModel{FT}(; v_cmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\n\nConstructor for C3CytochromeModel, given\n\nv_cmax25 Maximal carboxylation rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\ncolimit If true, use quadratic colimitations for ac, aj, and a_p\n\n\n\nExamples\n\ncy = C3CytochromeModel{Float64}();\ncy = C3CytochromeModel{Float64}(v_cmax25 = 30, r_d25 = 1, colimit = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.C3VJPModel","page":"API","title":"ClimaCache.C3VJPModel","text":"mutable struct C3VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C3 photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for Ac and Aj => Ai\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for Ai and Ap => Ag\nCOLIMIT_J::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for J\nEFF_1::AbstractFloat\nCoefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEFF_2::AbstractFloat\nCoefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\nTD_JMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Jmax temperature dependency\nTD_KC::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Kc temperature dependency\nTD_KO::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Ko temperature dependency\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type respiration temperature dependency\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Vcmax temperature dependency\nTD_Γ::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Γ* temperature dependency\nj_max25::AbstractFloat\nMaximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\nr_d25::AbstractFloat\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25::AbstractFloat\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25_ww::AbstractFloat\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\na_c::AbstractFloat\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\na_gross::AbstractFloat\nGross photosynthetic rate [μmol m⁻² s⁻¹]\na_j::AbstractFloat\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\na_net::AbstractFloat\nNet photosynthetic rate [μmol m⁻² s⁻¹]\na_p::AbstractFloat\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\ne_to_c::AbstractFloat\nElectron to CO₂ coefficient\nj::AbstractFloat\nElectron transport [μmol m⁻² s⁻¹]\nj_max::AbstractFloat\nMaximal electron transport rate at leaf temperature [μmol m⁻² s⁻¹]\nj_pot::AbstractFloat\nPotential Electron Transport Rate [μmol m⁻² s⁻¹]\nk_c::AbstractFloat\nRubisCO coefficient Kc [Pa]\nk_m::AbstractFloat\nMichaelis-Menten's coefficient [Pa]\nk_o::AbstractFloat\nRubisCO coefficient Ko [Pa]\nr_d::AbstractFloat\nRespiration rate at leaf temperature [μmol m⁻² s⁻¹]\nv_cmax::AbstractFloat\nMaximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\nγ_star::AbstractFloat\nCO₂ compensation point with the absence of Rd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C3VJPModel-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C3VJPModel","text":"C3VJPModel{FT}(; v_cmax25::Number = 50, j_max25::Number = 83.5, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\n\nConstructor for C3VJPModel, given\n\nv_cmax25 Maximal carboxylation rate at 298.15 K\nj_max25 Maximal electron transport rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\ncolimit If true, use quadratic colimitations for j and ac, aj, and a_p\n\n\n\nExamples\n\nc3 = C3VJPModel{Float64}();\nc3 = C3VJPModel{Float64}(v_cmax25 = 30, j_max25 = 50, r_d25 = 1, colimit = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.C4VJPModel","page":"API","title":"ClimaCache.C4VJPModel","text":"mutable struct C4VJPModel{FT<:AbstractFloat} <: ClimaCache.AbstractPhotosynthesisModel{FT<:AbstractFloat}\n\nStructure that stores C4 photosynthesis system information\n\nFields\n\nCOLIMIT_CJ::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for Ac and Aj => Ai\nCOLIMIT_IP::Union{ClimaCache.MinimumColimit{FT}, ClimaCache.QuadraticColimit{FT}, ClimaCache.SerialColimit{FT}} where FT<:AbstractFloat\nAbstractColimit type colimitation method for Ai and Ap => Ag\nTD_KPEP::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Kpep temperature dependency\nTD_R::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type  respiration temperature dependency\nTD_VCMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Vcmax temperature dependency\nTD_VPMAX::Union{ClimaCache.Arrhenius{FT}, ClimaCache.ArrheniusPeak{FT}, ClimaCache.Q10{FT}} where FT<:AbstractFloat\nAbstractTemperatureDependency type Vpmax temperature dependency\nr_d25::AbstractFloat\nRespiration rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25::AbstractFloat\nMaximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_cmax25_ww::AbstractFloat\nWell watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nv_pmax25::AbstractFloat\nMaximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\na_c::AbstractFloat\nRubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\na_gross::AbstractFloat\nGross photosynthetic rate [μmol m⁻² s⁻¹]\na_j::AbstractFloat\nLight limited photosynthetic rate [μmol m⁻² s⁻¹]\na_net::AbstractFloat\nNet photosynthetic rate [μmol m⁻² s⁻¹]\na_p::AbstractFloat\nProduct limited photosynthetic rate [μmol m⁻² s⁻¹]\ne_to_c::AbstractFloat\nElectron to CO₂ coefficient\nj_pot::AbstractFloat\nPotential Electron Transport Rate [μmol m⁻² s⁻¹]\nk_pep::AbstractFloat\nPEP coefficient Kpep [Pa]\nr_d::AbstractFloat\nRespiration rate at leaf temperature [μmol m⁻² s⁻¹]\nv_cmax::AbstractFloat\nMaximal carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\nv_pmax::AbstractFloat\nMaximal PEP carboxylation rate at leaf temperature [μmol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C4VJPModel-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C4VJPModel","text":"C4VJPModel{FT}(; v_cmax25::Number = 50, v_pmax25::Number = 50, r_d25::Number = 0.75, colimit::Bool = false) where {FT<:AbstractFloat}\n\nConstructor for C4VJPModel, given\n\nv_cmax25 Maximal carboxylation rate at 298.15 K\nv_pmax25 Maximal PEP carboxylation rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\ncolimit If true, use quadratic colimitations for ac, aj, and a_p\n\n\n\nExamples\n\nc4 = C4VJPModel{Float64}();\nc4 = C4VJPModel{Float64}(v_cmax25 = 30, v_pmax25 = 40, r_d25 = 1, colimit = true);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractPhotosynthesisMode","page":"API","title":"ClimaCache.AbstractPhotosynthesisMode","text":"abstract type AbstractPhotosynthesisMode\n\nHierarchy of AbstractSoilVC:\n\nGCO₂Mode\nPCO₂Mode\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.GCO₂Mode","page":"API","title":"ClimaCache.GCO₂Mode","text":"struct GCO₂Mode <: ClimaCache.AbstractPhotosynthesisMode\n\nAn empty structure to signal the function to calculate photosynthetic rates based on leaf diffusive conductance to CO₂.\n\n\n\nExamples\n\nmode = GCO₂Mode();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.PCO₂Mode","page":"API","title":"ClimaCache.PCO₂Mode","text":"struct PCO₂Mode <: ClimaCache.AbstractPhotosynthesisMode\n\nAn empty structure to signal the function to calculate photosynthetic rates based on CO₂ partial pressure.\n\n\n\nExamples\n\nmode = PCO₂Mode();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractColimit","page":"API","title":"ClimaCache.AbstractColimit","text":"abstract type AbstractColimit{FT<:AbstractFloat}\n\nHierarchy of AbstractColimit\n\nMinimumColimit\nQuadraticColimit\nSerialColimit\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MinimumColimit","page":"API","title":"ClimaCache.MinimumColimit","text":"struct MinimumColimit{FT<:AbstractFloat} <: ClimaCache.AbstractColimit{FT<:AbstractFloat}\n\nEmpty structure to indicate minimum colimitation.\n\n\n\nExamples\n\ncol = MinimumColimit{Float64}();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.QuadraticColimit","page":"API","title":"ClimaCache.QuadraticColimit","text":"mutable struct QuadraticColimit{FT<:AbstractFloat} <: ClimaCache.AbstractColimit{FT<:AbstractFloat}\n\nStructure to indicate quadratic colimitation.\n\nFields\n\nCURVATURE::AbstractFloat\nCurvature factor\n\n\n\nExamples\n\ncol = QuadraticColimit{Float64}(0.98);\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SerialColimit","page":"API","title":"ClimaCache.SerialColimit","text":"struct SerialColimit{FT<:AbstractFloat} <: ClimaCache.AbstractColimit{FT<:AbstractFloat}\n\nEmpty structure to indicate serial colimitation.\n\n\n\nExamples\n\ncol = SerialColimit{Float64}();\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractTemperatureDependency","page":"API","title":"ClimaCache.AbstractTemperatureDependency","text":"abstract type AbstractTemperatureDependency{FT<:AbstractFloat}\n\nHierarchy of AbstractTemperatureDependency:\n\nArrhenius\nArrheniusPeak\nQ10\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Arrhenius","page":"API","title":"ClimaCache.Arrhenius","text":"mutable struct Arrhenius{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn Arrhenius type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n\nFields\n\nT_REF::AbstractFloat\nReference temperature [K]\nVAL_REF::AbstractFloat\nUncorrected vakye at reference temperature\nΔHA::AbstractFloat\nActivation energy\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.ArrheniusPeak","page":"API","title":"ClimaCache.ArrheniusPeak","text":"mutable struct ArrheniusPeak{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn ArrheniusPeak type struct using\n\nY_1 = Y_0 cdot exp left( dfracH_aR T_0 - dfracH_aR T_1 right)\n          cdot dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n                         1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nT_REF::AbstractFloat\nReference temperature [K]\nVAL_REF::AbstractFloat\nUncorrected vakye at reference temperature\nΔHA::AbstractFloat\nActivation energy\nΔHD::AbstractFloat\nDeactivation energy\nΔSV::AbstractFloat\nEntropy factor\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Q10","page":"API","title":"ClimaCache.Q10","text":"mutable struct Q10{FT<:AbstractFloat} <: ClimaCache.AbstractTemperatureDependency{FT<:AbstractFloat}\n\nAn Q10 type struct using\n\nY_1 = Y_0 cdot Q_10 ^ dfracT_1 - T_010\n\nFields\n\nT_REF::AbstractFloat\nReference temperature [K]\nVAL_REF::AbstractFloat\nUncorrected vakye at reference temperature\nQ_10::AbstractFloat\nPower of Q10 correction\n\n\n\n\n\n","category":"type"},{"location":"API/#Radiation","page":"API","title":"Radiation","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"WaveLengthSet\nWaveLengthSet{FT}(swl::Vector = WAVELENGTHS; opti::String = OPTI_2021) where {FT<:AbstractFloat}\nAbstractRadiation\nBroadbandRadiation\nBroadbandRadiation{FT}() where {FT<:AbstractFloat}\nHyperspectralRadiation\nHyperspectralRadiation{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); file::String = FILE_SUN) where {FT<:AbstractFloat}\nHyperspectralAbsorption\nHyperspectralAbsorption{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); opti::String = OPTI_2021) where {FT<:AbstractFloat}\nSunSensorGeometry\nSunSensorGeometry{FT}(; haa::Number = 0, hsa::Number = 0, saa::Number = 180, sza::Number = 30, vaa::Number = 180, vza::Number = 0) where {FT<:AbstractFloat}\nHyperspectralMLCanopyOpticalProperty\nHyperspectralMLCanopyOpticalProperty{FT}(; n_azi::Int = 36, n_incl::Int = 9, n_layer::Int = 20, n_λ::Int = 114) where {FT<:AbstractFloat}\nAbstractCanopyRadiationProfile\nBroadbandSLCanopyRadiationProfile\nBroadbandSLCanopyRadiationProfile{FT}(; n_incl::Int = 9) where {FT<:AbstractFloat}\nHyperspectralMLCanopyRadiationProfile\nHyperspectralMLCanopyRadiationProfile{FT}(; n_azi::Int = 36, n_incl::Int = 9, n_layer::Int = 20, n_λ::Int = 114) where {FT<:AbstractFloat}\nAbstractLIDFAlgorithm\nVerhoefLIDF\nAbstractCanopy\nBroadbandSLCanopy\nBroadbandSLCanopy{FT}(; lai::Number = 3, θ_incl_bnds::Matrix = [collect(0:10:80) collect(10:10:90)]) where {FT<:AbstractFloat}\nHyperspectralMLCanopy\nHyperspectralMLCanopy{FT}(wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); lai::Number = 3, n_layer::Int = 20, θ_incl_bnds::Matrix = [collect(0:10:80) collect(10:10:90)]) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.WaveLengthSet","page":"API","title":"ClimaCache.WaveLengthSet","text":"mutable struct WaveLengthSet{FT<:AbstractFloat}\n\nStructure that stores wave length information.\n\nFields\n\nIΛ_NIR::Vector{Int64}\nIndicies of Λ_NIR in Λ\nIΛ_PAR::Vector{Int64}\nIndicies of Λ_PAR in Λ\nIΛ_SIF::Vector{Int64}\nIndicies of Λ_SIF in Λ\nIΛ_SIFE::Vector{Int64}\nIndicies of Λ_SIFE in Λ\nNΛ::Int64\nNumber of wavelength bins\nNΛ_PAR::Int64\nNumber of wavelength bins for PAR\nNΛ_SIF::Int64\nNumber of wavelength bins for SIF\nNΛ_SIFE::Int64\nNumber of wavelength bins for SIF excitation\nWL_NIR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for NIR [nm]\nWL_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for PAR [nm]\nWL_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF emission [nm]\nWL_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF excitation [nm]\nSΛ::Vector{FT} where FT<:AbstractFloat\nStandard wavelength (boundaries) [nm]\nΔΛ::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength [nm]\nΔΛ_PAR::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for PAR [nm]\nΔΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for SIF excitation [nm]\nΛ::Vector{FT} where FT<:AbstractFloat\nWavelength (bins) [nm]\nΛ_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength bins for PAR [nm]\nΛ_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF [nm]\nΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF excitation [nm]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WaveLengthSet-Union{Tuple{}, Tuple{Vector}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.WaveLengthSet","text":"WaveLengthSet{FT}(swl::Vector = WAVELENGTHS; opti::String = OPTI_2021) where {FT<:AbstractFloat}\n\nConstructor for WaveLengthSet, given\n\nswl Standard wave length boundaries [nm], default is ClimaCache.WAVELENGTHS\nopti Optical properties file path, default is ClimaCache.OPTI_2021\n\n\n\nExamples\n\nwls = WaveLengthSet{Float64}();\nwls = WaveLengthSet{Float64}(collect(400:5:2500));\nwls = WaveLengthSet{Float64}(collect(400:5:2500); opti=ClimaCache.OPTI_2017);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractRadiation","page":"API","title":"ClimaCache.AbstractRadiation","text":"abstract type AbstractRadiation{FT<:AbstractFloat}\n\nHierarchy of AbstractRadiation:\n\nBroadbandRadiation\nHyperspectralRadiation\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandRadiation","page":"API","title":"ClimaCache.BroadbandRadiation","text":"mutable struct BroadbandRadiation{FT} <: ClimaCache.AbstractRadiation{FT}\n\nStructure that stores broadband radiation information\n\nFields\n\ne_diffuse_nir::Any\nDiffuse radiation from NIR region [W m⁻²]\ne_diffuse_par::Any\nDiffuse radiation from PAR region [W m⁻²]\ne_direct_nir::Any\nDirect radiation from NIR region [W m⁻²]\ne_direct_par::Any\nDirect radiation from PAR region [W m⁻²]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandRadiation-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.BroadbandRadiation","text":"BroadbandRadiation{FT}() where {FT<:AbstractFloat}\n\nConstructor for BroadbandRadiation\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralRadiation","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"mutable struct HyperspectralRadiation{FT} <: ClimaCache.AbstractRadiation{FT}\n\nStructure that stores hyperspectral radiation information\n\nFields\n\ne_diffuse::Vector\nDiffuse radiation [mW m⁻² nm⁻¹]\ne_direct::Vector\nDirect radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralRadiation-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"HyperspectralRadiation{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); file::String = FILE_SUN) where {FT<:AbstractFloat}\n\nConstructor for HyperspectralRadiation, given\n\nwls WaveLengthSet type struct that defines wavelength settings\nfile File path to solar radiation setting, default is ClimaCache.FILE_SUN\n\n\n\nExamples\n\nrad = HyperspectralRadiation{FT}();\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)); file = \"\");\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)); file = ClimaCache.FILE_SUN);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralAbsorption","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"mutable struct HyperspectralAbsorption{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nK_ANT::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of anthocynanin [-]\nK_BROWN::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of senescent material (brown pigments) [-]\nK_CAB::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of chlorophyll a and b [-]\nK_CAR_V::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of violaxanthin carotenoid [-]\nK_CAR_Z::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of zeaxanthin carotenoid [-]\nK_CBC::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of carbon-based constituents [-]\nK_H₂O::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of water [-]\nK_LMA::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of dry matter [-]\nK_PRO::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of protein [-]\nK_PS::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of PS I and II [-]\nNR::Vector{FT} where FT<:AbstractFloat\nRefractive index [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralAbsorption-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"HyperspectralAbsorption{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(); opti::String = OPTI_2021) where {FT<:AbstractFloat}\n\nConstructor for HyperspectralAbsorption, given\n\nwls WaveLengthSet type structure\nopti Path to leaf optical properties\n\n\n\nExamples\n\nha = HyperspectralAbsorption{FT}();\nha = HyperspectralAbsorption{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\nha = HyperspectralAbsorption{FT}(WaveLengthSet{FT}(collect(400:50:2400)); opti=ClimaCache.OPTI_2017);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.SunSensorGeometry","page":"API","title":"ClimaCache.SunSensorGeometry","text":"mutable struct SunSensorGeometry{FT<:AbstractFloat}\n\nStructure that stores sun sensor geometry information.\n\nFields\n\nHAA::AbstractFloat\nHill facing azimuth angle [°], 0 for North, 180 for south\nHSA::AbstractFloat\nHill slope angle [°]\nsaa::AbstractFloat\nSolar azimuth angle [°], a function of time\nsza::AbstractFloat\nSolar zenith angle [°], a function of lat and time\nvaa::AbstractFloat\nViewing azimuth angle [°]\nvza::AbstractFloat\nViewing zenith angle [°]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.SunSensorGeometry-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.SunSensorGeometry","text":"SunSensorGeometry{FT}(; haa::Number = 0, hsa::Number = 0, saa::Number = 180, sza::Number = 30, vaa::Number = 180, vza::Number = 0) where {FT<:AbstractFloat}\n\nConstructor for SunSensorGeometry, given\n\nhaa Hill facing azimuth angle\nhsa Hill slope angle\nsaa Solar azimuth angle\nsza Solar zenith angle\nvaa Viewing azimuth angle\nvza Viewing zenith angle\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralMLCanopyOpticalProperty","page":"API","title":"ClimaCache.HyperspectralMLCanopyOpticalProperty","text":"mutable struct HyperspectralMLCanopyOpticalProperty{FT<:AbstractFloat}\n\nStructure for Verhoef LIDF algorithm\n\nFields\n\nddb::AbstractFloat\nBackward diffuse->diffuse scatter weight\nddf::AbstractFloat\nForward diffuse->diffuse scatter weight\ndob::AbstractFloat\nBackward diffuse->observer scatter weight\ndof::AbstractFloat\nForward diffuse->observer scatter weight\nfo::Matrix{FT} where FT<:AbstractFloat\nConversion factor fo for angle towards observer at different inclination and azimuth angles\nfs::Matrix{FT} where FT<:AbstractFloat\nConversion factor fs for angles from solar at different inclination and azimuth angles\nko::AbstractFloat\nObserver direction beam extinction coefficient weight (diffuse)\nks::AbstractFloat\nSolar direction beam extinction coefficient weight (direct)\np_sunlit::Vector{FT} where FT<:AbstractFloat\nProbability of directly viewing a leaf in solar direction at different layers\npo::Vector{FT} where FT<:AbstractFloat\nProbability of directly viewing a leaf in observer direction at different layer boundaries\nps::Vector{FT} where FT<:AbstractFloat\nProbability of directly viewing a leaf in solar direction at different layer boundaries\npso::Vector{FT} where FT<:AbstractFloat\nBi-directional probability of directly viewing a leaf at different layer boundaries (solar->canopy->observer)\nsdb::AbstractFloat\nDirectional->diffuse backscatter weight\nsdf::AbstractFloat\nDirectional->diffuse forward scatter weight\nsob::AbstractFloat\nSolar directional->observer weight of specular2directional backscatter coefficient\nsof::AbstractFloat\nSolar directional->observer weight of specular2directional forward coefficient\nϵ::Vector{FT} where FT<:AbstractFloat\nEffective emissivity for different layers\nρ_dd::Matrix{FT} where FT<:AbstractFloat\nEffective reflectance for diffuse->diffuse\nρ_lw::Vector{FT} where FT<:AbstractFloat\nEffective reflectance for longwave radiation\nρ_sd::Matrix{FT} where FT<:AbstractFloat\nEffective reflectance for directional->diffuse\nσ_ddb::Matrix{FT} where FT<:AbstractFloat\nBackward scattering coefficient for diffuse->diffuse at different layers and wavelength bins\nσ_ddf::Matrix{FT} where FT<:AbstractFloat\nForward scattering coefficient for diffuse->diffuse at different layers and wavelength bins\nσ_dob::Matrix{FT} where FT<:AbstractFloat\nBackward scattering coefficient for diffuse->observer at different layers and wavelength bins\nσ_dof::Matrix{FT} where FT<:AbstractFloat\nForward scattering coefficient for diffuse->observer at different layers and wavelength bins\nσ_sdb::Matrix{FT} where FT<:AbstractFloat\nBackward scattering coefficient for solar directional->diffuse at different layers and wavelength bins\nσ_sdf::Matrix{FT} where FT<:AbstractFloat\nForward scattering coefficient for solar directional->diffuse at different layers and wavelength bins\nσ_so::Matrix{FT} where FT<:AbstractFloat\nBidirectional from solar to observer scattering coefficient at different layers and wavelength bins\nτ_dd::Matrix{FT} where FT<:AbstractFloat\nEffective tranmittance for diffuse->diffuse\nτ_lw::Vector{FT} where FT<:AbstractFloat\nEffective tranmittance for longwave radiation\nτ_sd::Matrix{FT} where FT<:AbstractFloat\nEffective tranmittance for solar directional->diffuse\n_Co::Vector{FT} where FT<:AbstractFloat\ncos(inclination) * cos(vza) at different inclination angles\n_Cs::Vector{FT} where FT<:AbstractFloat\ncos(inclination) * cos(sza) at different inclination angles\n_So::Vector{FT} where FT<:AbstractFloat\nsin(inclination) * sin(vza) at different inclination angles\n_Ss::Vector{FT} where FT<:AbstractFloat\nsin(inclination) * sin(sza) at different inclination angles\n_abs_fo::Matrix{FT} where FT<:AbstractFloat\nabs of fo\n_abs_fs::Matrix{FT} where FT<:AbstractFloat\nabs of fs\n_abs_fs_fo::Matrix{FT} where FT<:AbstractFloat\nabs of fs * fo\n_bf::AbstractFloat\nWeighted sum of cos²(inclination)\n_cos_θ_azi_raa::Vector{FT} where FT<:AbstractFloat\nCosine of Θ_AZI - raa\n_fo_cos_θ_incl::Matrix{FT} where FT<:AbstractFloat\nfo * cos Θ_INCL\n_fs_cos_θ_incl::Matrix{FT} where FT<:AbstractFloat\nfs * cos Θ_INCL\n_fs_fo::Matrix{FT} where FT<:AbstractFloat\nfs * fo\n_ko::Vector{FT} where FT<:AbstractFloat\nOutgoing beam extinction coefficient weights at different inclination angles\n_ks::Vector{FT} where FT<:AbstractFloat\nSolar beam extinction coefficient weights at different inclination angles\n_mat⁺::Matrix{FT} where FT<:AbstractFloat\nUpwelling matrix for SIF excitation\n_mat⁻::Matrix{FT} where FT<:AbstractFloat\nDownwelling matrix for SIF excitation\n_sb::Vector{FT} where FT<:AbstractFloat\nBackward scattering coefficients at different inclination angles\n_sf::Vector{FT} where FT<:AbstractFloat\nForward scattering coefficients at different inclination angles\n_tmp_mat_incl_azi_1::Matrix{FT} where FT<:AbstractFloat\nTemporary cache used for matrix adding up purpose (nincl * nazi)\n_tmp_mat_incl_azi_2::Matrix{FT} where FT<:AbstractFloat\nTemporary cache used for matrix adding up purpose (nincl * nazi)\n_tmp_vec_azi::Vector{FT} where FT<:AbstractFloat\nTemporary cache used for vector operations (n_azi)\n_tmp_vec_layer::Vector{FT} where FT<:AbstractFloat\nTemporary cache used for vector operations (n_layer)\n_tmp_vec_sif_1::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF information\n_tmp_vec_sif_2::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF information\n_tmp_vec_sif_3::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF information\n_tmp_vec_sif_4::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF information\n_tmp_vec_sif_5::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF information\n_tmp_vec_sif_6::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF information\n_tmp_vec_sife_1::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF excitation information\n_tmp_vec_sife_2::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF excitation information\n_tmp_vec_sife_3::Vector{FT} where FT<:AbstractFloat\nCache variable to store the SIF excitation information\n_tmp_vec_λ::Vector{FT} where FT<:AbstractFloat\nTemporary cache used for vector operations (n_λ)\n_ρ_dd::Matrix{FT} where FT<:AbstractFloat\nReflectance for diffuse->diffuse at each canopy layer\n_ρ_lw::Vector{FT} where FT<:AbstractFloat\nReflectance for longwave radiation at each canopy layer\n_ρ_sd::Matrix{FT} where FT<:AbstractFloat\nReflectance for solar directional->diffuse at each canopy layer\n_τ_dd::Matrix{FT} where FT<:AbstractFloat\nTranmittance for diffuse->diffuse at each canopy layer\n_τ_lw::Vector{FT} where FT<:AbstractFloat\nTranmittance for longwave radiation at each canopy layer\n_τ_sd::Matrix{FT} where FT<:AbstractFloat\nTranmittance for solar directional->diffuse at each canopy layer\n_τ_ss::AbstractFloat\nTranmittance for solar directional->directional at each canopy layer\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralMLCanopyOpticalProperty-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralMLCanopyOpticalProperty","text":"HyperspectralMLCanopyOpticalProperty{FT}(; n_azi::Int = 36, n_incl::Int = 9, n_layer::Int = 20, n_λ::Int = 114, n_λe::Int = 45, n_λf::Int = 29) where {FT<:AbstractFloat}\n\nConstruct a struct to store canopy optical properties, given\n\nn_azi Number of azimuth angles\nn_incl Number of inclination angles\nn_layer Number of canopy layers\nn_λ Number of wavelength bins\nn_λe Number of SIF excitation wavelength bins\nn_λf Number of SIF wavelength bins\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractCanopyRadiationProfile","page":"API","title":"ClimaCache.AbstractCanopyRadiationProfile","text":"abstract type AbstractCanopyRadiationProfile{FT<:AbstractFloat}\n\nHierarchy of AbstractCanopy:\n\nBroadbandSLCanopyRadiationProfile\nHyperspectralMLCanopyRadiationProfile\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSLCanopyRadiationProfile","page":"API","title":"ClimaCache.BroadbandSLCanopyRadiationProfile","text":"mutable struct BroadbandSLCanopyRadiationProfile{FT} <: ClimaCache.AbstractCanopyRadiationProfile{FT}\n\nStructure to store canopy radiation profiles\n\nFields\n\napar_shaded::Any\nMean shaded leaf APAR (per leaf area) in μmol m⁻² s⁻¹\napar_sunlit::Any\nMean sunlit leaf APAR (per leaf area) in μmol m⁻² s⁻¹\nk_diffuse::Any\nWeighted extinction coefficient for diffuse radiation (ratio between projected area to true leaf area)\nk_direct::Any\nWeighted extinction coefficient for direct radiation (ratio between projected area to true leaf area)\nlai_shaded::Any\nTotal shaded leaf area index\nlai_sunlit::Any\nTotal sunlit leaf area index\npar_shaded::Any\nMean shaded leaf PAR (per leaf area) in μmol m⁻² s⁻¹\npar_sunlit::Any\nMean sunlit leaf PAR (per leaf area) in μmol m⁻² s⁻¹\nr_net_shaded::Any\nNet absorbed radiation for shaded leaves [W m⁻²]\nr_net_sunlit::Any\nNet absorbed radiation for sunlit leaves [W m⁻²]\n_k_diffuse::Vector\nExtinction coefficient for diffuse radiation at different leaf inclination angles\n_k_direct::Vector\nExtinction coefficient for direct radiation at different leaf inclination angles\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSLCanopyRadiationProfile-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.BroadbandSLCanopyRadiationProfile","text":"BroadbandSLCanopyRadiationProfile{FT}(; n_incl::Int = 9) where {FT<:AbstractFloat}\n\nConstruct a struct to store broadband canopy radiation profiles, given\n\nn_incl Number of inclination angles\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralMLCanopyRadiationProfile","page":"API","title":"ClimaCache.HyperspectralMLCanopyRadiationProfile","text":"mutable struct HyperspectralMLCanopyRadiationProfile{FT} <: ClimaCache.AbstractCanopyRadiationProfile{FT}\n\nStructure to store canopy radiation profiles\n\nFields\n\nalbedo::Vector\nAlbedo towards the viewing direction\napar_shaded::Vector\nMean APAR for shaded leaves [μmol m⁻² s⁻¹]\napar_sunlit::Array{FT, 3} where FT\nAPAR for sunlit leaves [μmol m⁻² s⁻¹]\ne_diffuse_down::Matrix\nDownwelling diffuse short-wave radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\ne_diffuse_up::Matrix\nUpwelling diffuse short-wave radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\ne_direct::Matrix\nSolar directly radiation at each canopy layer boundary [mW m⁻² nm⁻¹]\ne_net_diffuse::Matrix\nNet diffuse radiation at each canopy layer for APAR [mW m⁻² nm⁻¹]\ne_net_direct::Matrix\nNet direct radiation at each canopy layer for APAR [mW m⁻² nm⁻¹]\ne_o::Vector\nTotal radiation towards the viewing direction [mW m⁻² nm⁻¹]\ne_sum_diffuse::Matrix\nSum diffuse radiation at each canopy layer for PAR [mW m⁻² nm⁻¹]\ne_sum_direct::Matrix\nSum direct radiation at each canopy layer for PAR [mW m⁻² nm⁻¹]\ne_v::Matrix\nRadiation towards the viewing direction per layer (including soil) [mW m⁻² nm⁻¹]\npar_in::Any\nTotal incoming radiation PAR [μmol m⁻² s⁻¹]\npar_in_diffuse::Any\nDiffuse incoming radiation PAR [μmol m⁻² s⁻¹]\npar_in_direct::Any\nDirect incoming radiation PAR [μmol m⁻² s⁻¹]\npar_shaded::Vector\nMean PAR for shaded leaves (before absorption) [μmol m⁻² s⁻¹]\npar_sunlit::Array{FT, 3} where FT\nPAR for sunlit leaves (before absorption) [μmol m⁻² s⁻¹]\nppar_shaded::Vector\nMean APAR for shaded leaves for photosynthesis [μmol m⁻² s⁻¹]\nppar_sunlit::Array{FT, 3} where FT\nAPAR for sunlit leaves for photosynthesis [μmol m⁻² s⁻¹]\nr_lw::Vector\nLongwave energy flux from leaves per leaf area (one side) [W m⁻²]\nr_lw_down::Vector\nDownwelling longwave energy flux [W m⁻²]\nr_lw_up::Vector\nUpwelling longwave energy flux [W m⁻²]\nr_net_lw::Vector\nNet longwave energy absorption for all leaves [W m⁻²]\nr_net_sw::Vector\nNet shortwave energy absorption for all leaves [W m⁻²]\nr_net_sw_shaded::Vector\nNet shortwave energy absorption for shaded leaves [W m⁻²]\nr_net_sw_sunlit::Vector\nNet shortwave energy absorption for sunlit leaves [W m⁻²]\ns_layer_down::Matrix\nDownwelling SIF for sunlit leaves at each wavelength for a layer\ns_layer_up::Matrix\nUpwelling SIF for sunlit leaves at each wavelength for a layer\nsif_down::Matrix\nDownwelling SIF\nsif_obs::Vector\nSIF at observer direction\nsif_obs_shaded::Vector\nSIF at observer direction from shaded APAR\nsif_obs_scatter::Vector\nSIF at observer direction from scattering\nsif_obs_ssoil::Vector\nSIF at observer direction from soil reflection\nsif_obs_sunlit::Vector\nSIF at observer direction from sunlit APAR\nsif_up::Matrix\nUpwelling SIF\nϕ_shaded::Vector\nShaded leaf fluorescence quantum yield\nϕ_sunlit::Array{FT, 3} where FT\nSunlit leaf fluorescence quantum yield\n_apar_shaded::Vector\nMean APAR for shaded leaves per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n_apar_sunlit::Vector\nAPAR for sunlit leaves per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n_par_shaded::Vector\nMean PAR for shaded leaves per wavelength (before absorption) [μmol m⁻² s⁻¹ nm⁻¹]\n_par_sunlit::Vector\nPAR for sunlit leaves per wavelength (before absorption) [μmol m⁻² s⁻¹ nm⁻¹]\n_ppar_shaded::Vector\nMean APAR for shaded leaves for photosynthesis per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n_ppar_sunlit::Vector\nAPAR for sunlit leaves for photosynthesis per wavelength [μmol m⁻² s⁻¹ nm⁻¹]\n_r_emit_down::Vector\nDownwelling longwave energy flux cache [W m⁻²]\n_r_emit_up::Vector\nUpwelling longwave energy flux cache [W m⁻²]\n_s_emit_down::Matrix\nDownwelling SIF for sunlit leaves at each wavelength\n_s_emit_up::Matrix\nUpwelling SIF for sunlit leaves at each wavelength\n_s_shaded_down::Vector\nDownwelling SIF for shaded leaves at each wavelength\n_s_shaded_up::Vector\nUpwelling SIF for shaded leaves at each wavelength\n_s_sunlit_down::Vector\nDownwelling SIF for sunlit leaves at each wavelength\n_s_sunlit_up::Vector\nUpwelling SIF for sunlit leaves at each wavelength\n_sif_obs_shaded::Matrix\nCache to compute SIF at observer direction from shaded APAR\n_sif_obs_scatter::Matrix\nCache to compute SIF at observer direction from scattering\n_sif_obs_sunlit::Matrix\nCache to compute SIF at observer direction from sunlit APAR\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralMLCanopyRadiationProfile-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralMLCanopyRadiationProfile","text":"HyperspectralMLCanopyRadiationProfile{FT}(; n_azi::Int = 36, n_incl::Int = 9, n_layer::Int = 20, n_par::Int = 35, n_λ::Int = 114, n_λf::Int = 29) where {FT<:AbstractFloat}\n\nConstruct a struct to store hyperspectral canopy radiation profiles, given\n\nn_azi Number of azimuth angles\nn_incl Number of inclination angles\nn_layer Number of canopy layers\nn_par Number of PAR wavelength bins\nn_λ Number of wavelength bins\nn_λf Number of SIF wavelength bins\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractLIDFAlgorithm","page":"API","title":"ClimaCache.AbstractLIDFAlgorithm","text":"abstract type AbstractLIDFAlgorithm{FT<:AbstractFloat}\n\nHierarchy of AbstractLIDFAlgorithm:\n\nVerhoefLIDF\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VerhoefLIDF","page":"API","title":"ClimaCache.VerhoefLIDF","text":"mutable struct VerhoefLIDF{FT} <: ClimaCache.AbstractLIDFAlgorithm{FT}\n\nStructure for Verhoef LIDF algorithm\n\nFields\n\nA::Any\nLeaf inclination angle distribution function parameter a\nB::Any\nLeaf inclination angle distribution function parameter b\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.AbstractCanopy","page":"API","title":"ClimaCache.AbstractCanopy","text":"abstract type AbstractCanopy{FT<:AbstractFloat}\n\nHierarchy of AbstractCanopy:\n\nBroadbandSLCanopy\nHyperspectralMLCanopy\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSLCanopy","page":"API","title":"ClimaCache.BroadbandSLCanopy","text":"mutable struct BroadbandSLCanopy{FT} <: ClimaCache.AbstractCanopy{FT}\n\nStructure to save single layer broadband canopy parameters\n\nFields\n\nLIDF::ClimaCache.VerhoefLIDF\nLeaf inclination angle distribution function algorithm\nP_INCL::Vector\nInclination angle distribution\nRADIATION::ClimaCache.BroadbandSLCanopyRadiationProfile\nCanopy radiation profiles\nΘ_INCL::Vector\nMean inclination angles [°]\nΘ_INCL_BNDS::Matrix\nBounds of inclination angles [°]\nci::Any\nClumping index\nlai::Any\nLeaf area index\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSLCanopy-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.BroadbandSLCanopy","text":"BroadbandSLCanopy{FT}(; lai::Number = 3, θ_incl_bnds::Matrix = [collect(0:10:80) collect(10:10:90)]) where {FT<:AbstractFloat}\n\nConstruct a single layer canopy for hyperspectral radiative transfer, given\n\nlai Leaf area index\nθ_incl_bnds Inclination angle boundary values\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralMLCanopy","page":"API","title":"ClimaCache.HyperspectralMLCanopy","text":"mutable struct HyperspectralMLCanopy{FT} <: ClimaCache.AbstractCanopy{FT}\n\nStructure to save multiple layer hyperspectral canopy parameters\n\nFields\n\nAPAR_CAR::Bool\nWhether Carotenoid absorption is accounted for in APAR\nHOT_SPOT::Any\nHot spot parameter\nLIDF::ClimaCache.VerhoefLIDF\nLeaf inclination angle distribution function algorithm\nN_AZI::Int64\nNumber of azimuth angles\nN_INCL::Int64\nNumber of inclination angles\nN_LAYER::Int64\nNumber of canopy layers\nOPTICS::ClimaCache.HyperspectralMLCanopyOpticalProperty{FT} where FT\nCanopy optical properties\nP_INCL::Vector\nInclination angle distribution\nRADIATION::ClimaCache.HyperspectralMLCanopyRadiationProfile\nCanopy radiation profiles\nWLSET::ClimaCache.WaveLengthSet{FT} where FT\nWave length set used to paramertize other variables\nΩ_A::Any\nClumping structure a\nΩ_B::Any\nClumping structure b\nΘ_AZI::Vector\nMean azimuth angles [°]\nΘ_INCL::Vector\nMean inclination angles [°]\nΘ_INCL_BNDS::Matrix\nBounds of inclination angles [°]\nci::Any\nClumping index\nlai::Any\nLeaf area index\n_1_AZI::Vector\nOnes with the length of Θ_AZI\n_COS_Θ_AZI::Vector\nCosine of Θ_AZI\n_COS²_Θ_INCL::Vector\nSquare of cosine of Θ_INCL\n_COS²_Θ_INCL_AZI::Matrix\nSquare of cosine of Θ_INCL at different azimuth angles\n_x_bnds::Vector\nCache for level boundary locations\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralMLCanopy-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralMLCanopy","text":"HyperspectralMLCanopy{FT}(\n            wls::WaveLengthSet{FT} = WaveLengthSet{FT}();\n            lai::Number = 3,\n            n_layer::Int = 20,\n            θ_incl_bnds::Matrix = [collect(0:10:80) collect(10:10:90)]\n) where {FT<:AbstractFloat}\n\nConstruct a multiple layer canopy for hyperspectral radiative transfer, given\n\nwls WaveLengthSet type struct that defines wavelength settings\nlai Leaf area index\nn_layer Total canopy layers\nθ_incl_bnds Inclination angle boundary values\n\n\n\n\n\n","category":"method"},{"location":"API/#Soil","page":"API","title":"Soil","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractSoilVC\nBrooksCorey\nVanGenuchten\nVanGenuchten{FT}(name::String, α::Number, n::Number, θ_sat::Number, θ_res::Number) where {FT<:AbstractFloat}\nVanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\nAbstractSoilAlbedo\nBroadbandSoilAlbedo\nBroadbandSoilAlbedo{FT}() where {FT<:AbstractFloat}\nHyperspectralSoilAlbedo\nHyperspectralSoilAlbedo{FT}(wls::WaveLengthSet{FT}= WaveLengthSet{FT}()) where {FT<:AbstractFloat}\nSoil\nSoil{FT}(zs::Vector{FT}, wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); soil_type::String = \"Loam\") where {FT<:AbstractFloat}\nSoil{FT}(zs::Vector{FT}, broadband::Bool; soil_type::String = \"Loam\") where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AbstractSoilVC","page":"API","title":"ClimaCache.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BrooksCorey","page":"API","title":"ClimaCache.BrooksCorey","text":"struct BrooksCorey{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nTYPE::String\nSoil type\nB::AbstractFloat\nSoil b\nΨ_SAT::AbstractFloat\nPotential at saturation [MPa]\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten","page":"API","title":"ClimaCache.VanGenuchten","text":"struct VanGenuchten{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nvan Genuchten soil parameters\n\nFields\n\nTYPE::String\nSoil type\nΑ::AbstractFloat\nSoil α is related to the inverse of the air entry suction, α > 0\nN::AbstractFloat\nSoil n is Measure of the pore-size distribution\nM::AbstractFloat\nSoil m = 1 - 1/n\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{FT}, Tuple{String, Number, Number, Number, Number}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String, α::Number, n::Number, θ_sat::Number, θ_res::Number) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name\nα van Genuchten α\nn van Genuchten n\nθ_sat Saturated soil volumetric water content\nθ_res Residual soil volumetric water content\n\n\n\nExamples\n\nvg = VanGenuchten{FT}(\"Test\", FT(100), FT(2), FT(0.5), FT(0.1));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name, need to be Sand, Loamy Sand, Sandy Loam, Loam, Sandy Clay Loam, Silt Loam, Silt (default), Clay Loam, Silty Clay Loam, Sandy Clay, Silty Clay, and Clay.\n\n\n\nExamples\n\nvg = VanGenuchten{FT}(\"\");\nvg = VanGenuchten{FT}(\"Loam\");\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractSoilAlbedo","page":"API","title":"ClimaCache.AbstractSoilAlbedo","text":"abstract type AbstractSoilAlbedo{FT<:AbstractFloat}\n\nHierarchy of AbstractSoilAlbedo:\n\nBroadbandSoilAlbedo\nHyperspectralSoilAlbedo\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSoilAlbedo","page":"API","title":"ClimaCache.BroadbandSoilAlbedo","text":"mutable struct BroadbandSoilAlbedo{FT} <: ClimaCache.AbstractSoilAlbedo{FT}\n\nStructure for broadband soil albedo\n\nFields\n\ne_net_diffuse::Any\nNet diffuse radiation at top soil [W m⁻²]\ne_net_direct::Any\nNet direct radiation at top soil [W m⁻²]\nr_net_lw::Any\nNet longwave energy absorption [W m⁻²]\nr_net_sw::Any\nNet shortwave energy absorption [W m⁻²]\nρ_lw::Any\nReflectance for longwave radiation\nρ_sw::Vector\nReflectance for shortwave radiation (for PAR and NIR)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BroadbandSoilAlbedo-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.BroadbandSoilAlbedo","text":"BroadbandSoilAlbedo{FT}() where {FT<:AbstractFloat}\n\nConstruct a broadband soil albedo struct\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.HyperspectralSoilAlbedo","page":"API","title":"ClimaCache.HyperspectralSoilAlbedo","text":"mutable struct HyperspectralSoilAlbedo{FT} <: ClimaCache.AbstractSoilAlbedo{FT}\n\nStructure for hyperspectral soil albedo\n\nFields\n\ne_net_diffuse::Vector\nNet diffuse radiation at top soil [mW m⁻² nm⁻¹]\ne_net_direct::Vector\nNet direct radiation at top soil [mW m⁻² nm⁻¹]\nmat_ρ::Matrix\nA matrix of characteristic curves\nr_net_lw::Any\nNet longwave energy absorption [W m⁻²]\nr_net_sw::Any\nNet shortwave energy absorption [W m⁻²]\nρ_lw::Any\nReflectance for longwave radiation\nρ_sw::Vector\nReflectance for shortwave radiation\n_tmp_vec_nir::Vector\nCache variable with length of NIR\n_weight::Vector\nWeights of the four characteristic curves\n_ρ_sw::Vector\nCache variable to store ρPAR and ρNIR (a segmented curve)\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralSoilAlbedo-Union{Tuple{}, Tuple{ClimaCache.WaveLengthSet{FT}}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralSoilAlbedo","text":"HyperspectralSoilAlbedo{FT}(wls::WaveLengthSet{FT}= WaveLengthSet{FT}()) where {FT<:AbstractFloat}\n\nConstruct a hyperspectral soil albedo struct, given     - wls WaveLengthSet type struct that defines wavelength settings\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.Soil","page":"API","title":"ClimaCache.Soil","text":"mutable struct Soil{FT<:AbstractFloat}\n\nStructure for Soil\n\nFields\n\nALBEDO::Union{ClimaCache.BroadbandSoilAlbedo{FT}, ClimaCache.HyperspectralSoilAlbedo{FT}} where FT<:AbstractFloat\nAlbedo related structure\nCOLOR::Int64\nColor class as in CLM\nVC::Union{ClimaCache.BrooksCorey{FT}, ClimaCache.VanGenuchten{FT}} where FT<:AbstractFloat\nSoil moisture retention curve\nZ::AbstractFloat\nMean depth\nZS::Vector{FT} where FT<:AbstractFloat\nDepth boundaries\nt::AbstractFloat\nTemperature\nθ::AbstractFloat\nSoil water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Soil-Union{Tuple{Vector{FT}}, Tuple{FT}, Tuple{Vector{FT}, ClimaCache.WaveLengthSet{FT}}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Soil","text":"Soil{FT}(zs::Vector{FT}, wls::WaveLengthSet{FT} = WaveLengthSet{FT}(); soil_type::String = \"Loam\") where {FT<:AbstractFloat}\n\nConstruct a soil struct, given\n\nzs Soil upper and lower boundaries\nwls WaveLengthSet type struct that defines wavelength settings\nsoil_type Soil type name\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.Soil-Union{Tuple{FT}, Tuple{Vector{FT}, Bool}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Soil","text":"Soil{FT}(zs::Vector{FT}, broadband::Bool; soil_type::String = \"Loam\") where {FT<:AbstractFloat}\n\nConstruct a soil struct, given\n\nzs Soil upper and lower boundaries\nbroadband Indicating broadband soil albedo\nsoil_type Soil type name\n\n\n\n\n\n","category":"method"},{"location":"API/#SPAC","page":"API","title":"SPAC","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Root\nRoot{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\nStem\nStem{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\nAbstractSPACSystem\nMonoElementSPAC\nMonoElementSPAC{FT}(psm::String; broadband::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\nMonoGrassSPAC\nMonoGrassSPAC{FT}(psm::String; zr::Number = -0.2, zc::Number = 0.5, zss::Vector = collect(0:-0.1:-1), zas::Vector = collect(0:0.05:1), broadband::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\nMonoPalmSPAC\nMonoPalmSPAC{FT}(psm::String; zr::Number = -1, zt::Number = 10, zc::Number = 12, zss::Vector = collect(0:-0.25:-2), zas::Vector = collect(0:0.2:13), broadband::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\nMonoTreeSPAC\nMonoTreeSPAC{FT}(psm::String; zr::Number = -1, zt::Number = 10, zc::Number = 12, zss::Vector = collect(0:-0.25:-2), zas::Vector = collect(0:0.2:13), broadband::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.Root","page":"API","title":"ClimaCache.Root","text":"mutable struct Root{FT<:AbstractFloat}\n\nStructure to save root parameters\n\nFields\n\nHS::ClimaCache.RootHydraulics{FT} where FT<:AbstractFloat\nRootHydraulics type root hydraulic system\nt::AbstractFloat\nCurrent temperature\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Root-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Root","text":"Root{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a Root structure, given\n\nssm Whether the flow rate is at steady state\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.Stem","page":"API","title":"ClimaCache.Stem","text":"mutable struct Stem{FT<:AbstractFloat}\n\nStructure to save stem parameters\n\nFields\n\nHS::ClimaCache.StemHydraulics{FT} where FT<:AbstractFloat\nStemHydraulics type stem hydraulic system\nt::AbstractFloat\nCurrent temperature\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.Stem-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.Stem","text":"Stem{FT}(; ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a Stem structure, given\n\nssm Whether the flow rate is at steady state\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractSPACSystem","page":"API","title":"ClimaCache.AbstractSPACSystem","text":"abstract type AbstractSPACSystem{FT<:AbstractFloat}\n\nHierarchy of AbstractSPACSystem:\n\nMonoElementSPAC\nMonoGrassSPAC\nMonoPalmSPAC\nMonoTreeSPAC\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoElementSPAC","page":"API","title":"ClimaCache.MonoElementSPAC","text":"mutable struct MonoElementSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for simplest SPAC system\n\nFields\n\nLEAF::ClimaCache.Leaf{FT} where FT\nLeaf system\nROOT::ClimaCache.Root{FT} where FT\nRoot system\nSTEM::ClimaCache.Stem{FT} where FT\nStem system\n_krs::Vector\nRelative hydraulic conductance\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoElementSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoElementSPAC","text":"MonoElementSPAC{FT}(psm::String; broadband::Bool = false, ssm::Bool = true) where {FT<:AbstractFloat}\n\nConstruct a MonoElementSPAC type toy SPAC system, given\n\npsm Photosynthesis model, must be C3, C4, or C3Cytochrome\nbroadband Whether leaf biophysics is in broadband mode\nssm Whether the flow rate is at steady state\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.MonoGrassSPAC","page":"API","title":"ClimaCache.MonoGrassSPAC","text":"mutable struct MonoGrassSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for monospecies grass SPAC system\n\nFields\n\nLEAVES::Array{ClimaCache.Leaf{FT}, 1} where FT\nLeaf hydrualic system\nLEAVES_INDEX::Vector{Int64}\nCorresponding air layer per canopy layer\nN_CANOPY::Int64\nNumber of canopy layers\nN_ROOT::Int64\nNumber of root layers\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT\nRoot hydraulic system\nROOTS_INDEX::Vector{Int64}\nCorresponding soil layer per root layer\n_fs::Vector\nFlow rate per root layer\n_ks::Vector\nConductances for each root layer at given flow\n_ps::Vector\nPressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoGrassSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoGrassSPAC","text":"MonoGrassSPAC{FT}(\n            psm::String;\n            zr::Number = -0.2,\n            zc::Number = 0.5,\n            zss::Vector = collect(0:-0.1:-1),\n            zas::Vector = collect(0:0.05:1),\n            broadband::Bool = false,\n            ssm::Bool = true\n) where {FT<:AbstractFloat}\n\nConstruct a SPAC system for monospecies grass system, given\n\npsm Photosynthesis model, must be C3, C4, or C3Cytochrome\nzr Maximal root depth (negative value)\nzc Maximal canopy height (positive value)\nzss Vector of soil layer boundaries starting from 0\nzas Vector of air layer boundaries starting from 0\nbroadband Whether leaf biophysics is in broadband mode\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nspac = MonoGrassSPAC{Float64}();\nspac = MonoGrassSPAC{Float64}(zr = -0.3, zc = 1, zss = collect(0:-0.1:-1), zas = collect(0:0.05:1.01));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.MonoPalmSPAC","page":"API","title":"ClimaCache.MonoPalmSPAC","text":"mutable struct MonoPalmSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for monospecies palm SPAC system (with trunk)\n\nFields\n\nLEAVES::Array{ClimaCache.Leaf{FT}, 1} where FT\nLeaf hydrualic system\nLEAVES_INDEX::Vector{Int64}\nCorresponding air layer per canopy layer\nN_CANOPY::Int64\nNumber of canopy layers\nN_ROOT::Int64\nNumber of root layers\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT\nRoot hydraulic system\nROOTS_INDEX::Vector{Int64}\nCorresponding soil layer per root layer\nTRUNK::ClimaCache.Stem{FT} where FT\nTrunk hydraulic system\n_fs::Vector\nFlow rate per root layer\n_ks::Vector\nConductances for each root layer at given flow\n_ps::Vector\nPressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoPalmSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoPalmSPAC","text":"MonoPalmSPAC{FT}(\n            psm::String;\n            zr::Number = -1,\n            zt::Number = 10,\n            zc::Number = 12,\n            zss::Vector = collect(0:-0.25:-2),\n            zas::Vector = collect(0:0.2:13),\n            broadband::Bool = false,\n            ssm::Bool = true\n) where {FT<:AbstractFloat}\n\nConstruct a SPAC system for monospecies palm system, given\n\npsm Photosynthesis model, must be C3 or C3Cytochrome\nzr Maximal root depth (negative value)\nzt Maximum trunk height\nzc Maximal canopy height (positive value)\nzss Vector of soil layer boundaries starting from 0\nzas Vector of air layer boundaries starting from 0\nbroadband Whether leaf biophysics is in broadband mode\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nspac = MonoPalmSPAC{Float64}();\nspac = MonoPalmSPAC{Float64}(zr = -1, zt = 11, zc = 1, zss = collect(0:-0.1:-2), zas = collect(0:0.2:13));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.MonoTreeSPAC","page":"API","title":"ClimaCache.MonoTreeSPAC","text":"mutable struct MonoTreeSPAC{FT} <: ClimaCache.AbstractSPACSystem{FT}\n\nStruct for monospecies tree SPAC system (with trunk and branches)\n\nFields\n\nBRANCHES::Array{ClimaCache.Stem{FT}, 1} where FT\nBranch hydraulic system\nLEAVES::Array{ClimaCache.Leaf{FT}, 1} where FT\nLeaf hydrualic system\nLEAVES_INDEX::Vector{Int64}\nCorresponding air layer per canopy layer\nN_CANOPY::Int64\nNumber of canopy layers\nN_ROOT::Int64\nNumber of root layers\nROOTS::Array{ClimaCache.Root{FT}, 1} where FT\nRoot hydraulic system\nROOTS_INDEX::Vector{Int64}\nCorresponding soil layer per root layer\nTRUNK::ClimaCache.Stem{FT} where FT\nTrunk hydraulic system\n_fs::Vector\nFlow rate per root layer\n_ks::Vector\nConductances for each root layer at given flow\n_ps::Vector\nPressure for each root layer at given flow\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.MonoTreeSPAC-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.MonoTreeSPAC","text":"MonoTreeSPAC{FT}(\n            psm::String;\n            zr::Number = -1,\n            zt::Number = 10,\n            zc::Number = 12,\n            zss::Vector = collect(0:-0.25:-2),\n            zas::Vector = collect(0:0.2:13),\n            broadband::Bool = false,\n            ssm::Bool = true\n) where {FT<:AbstractFloat}\n\nConstruct a SPAC system for monospecies tree system, given\n\npsm Photosynthesis model, must be C3, C4, or C3Cytochrome (note: there are C4 shrubs)\nzr Maximal root depth (negative value)\nzt Maximum trunk height\nzc Maximal canopy height (positive value)\nzss Vector of soil layer boundaries starting from 0\nzas Vector of air layer boundaries starting from 0\nbroadband Whether leaf biophysics is in broadband mode\nssm Whether the flow rate is at steady state\n\n\n\nExamples\n\nspac = MonoTreeSPAC{Float64}();\nspac = MonoTreeSPAC{Float64}(zr = -1, zt = 11, zc = 1, zss = collect(0:-0.1:-2), zas = collect(0:0.2:13));\n\n\n\n\n\n","category":"method"}]
}
