var documenterSearchIndex = {"docs":
[{"location":"#ClimaCache.jl","page":"Home","title":"ClimaCache.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cache system for CliMA Land model.","category":"page"},{"location":"API/#ClimaCache","page":"API","title":"ClimaCache","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = ClimaCache","category":"page"},{"location":"API/#Plant","page":"API","title":"Plant","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"HyperspectralAbsorption\nHyperspectralAbsorption{FT}(wls::WaveLengthSet) where {FT<:AbstractFloat}\nLeafBiophysics\nLeafBiophysics{FT}(wls::WaveLengthSet) where {FT<:AbstractFloat}\nAbstractPhotosynthesisSystem\nC₃VJPSystem\nC₃VJPSystem{FT}() where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.HyperspectralAbsorption","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"mutable struct HyperspectralAbsorption{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nK_ANT::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of anthocynanin [-]\nK_BROWN::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of senescent material (brown pigments) [-]\nK_CAB::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of chlorophyll a and b [-]\nK_CAR_V::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of violaxanthin carotenoid [-]\nK_CAR_Z::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of zeaxanthin carotenoid [-]\nK_CBC::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of carbon-based constituents [-]\nK_H₂O::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of water [-]\nK_LMA::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of dry matter [-]\nK_PRO::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of protein [-]\nK_PS::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of PS I and II [-]\nNR::Vector{FT} where FT<:AbstractFloat\nRefractive index [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralAbsorption-Union{Tuple{WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralAbsorption","text":"HyperspectralAbsorption{FT}(wls::WaveLengthSet; opti::String=OPTI_2021) where {FT<:AbstractFloat}\n\nConstructor for HyperspectralAbsorption, given\n\nwls WaveLengthSet type structure\nopti Path to leaf optical properties\n\n\n\nExamples\n\nha = HyperspectralAbsorption{FT}();\nha = HyperspectralAbsorption{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\nha = HyperspectralAbsorption{FT}(WaveLengthSet{FT}(collect(400:50:2400)); opti=ClimaCache.OPTI_2017);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.LeafBiophysics","page":"API","title":"ClimaCache.LeafBiophysics","text":"mutable struct LeafBiophysics{FT<:AbstractFloat}\n\nStruct that contains leaf biophysical traits used to run leaf reflection and transmittance.\n\nFields\n\nMESOPHYLL_N::AbstractFloat\nLeaf mesophyll structural parameter that describes mesophyll reflection and transmittance\nNDUB::Int64\nDoubling adding layers\nant::AbstractFloat\nAnthocynanin content [ug cm⁻²]\nbrown::AbstractFloat\nSenescent material (brown pigments) fraction [-]\ncab::AbstractFloat\nChlorophyll a and b content [ug cm⁻²]\ncar::AbstractFloat\nCarotenoid content [ug cm⁻²]\ncbc::AbstractFloat\nCarbon-based constituents in lma [g cm⁻²]\nf_zeax::Any\nZeaxanthin fraction in Carotenoid (1=all Zeaxanthin, 0=all Violaxanthin) [-]\nl_H₂O::AbstractFloat\nEquivalent water thickness [cm]\nlma::AbstractFloat\nDry matter content (dry leaf mass per unit area) [g cm⁻²]\npro::AbstractFloat\nProtein content in lma (pro = lma - cbc) [g cm⁻²]\nk_all::Vector{FT} where FT<:AbstractFloat\nSpecific absorption coefficients of all materials\nmat_b::Matrix{FT} where FT<:AbstractFloat\nFluorescence excitation matrix backwards [-]\nmat_f::Matrix{FT} where FT<:AbstractFloat\nFluorescence excitation matrix forwards [-]\nα_cab::Vector{FT} where FT<:AbstractFloat\nRelative absorption by Chlorophyll [-]\nα_cabcar::Vector{FT} where FT<:AbstractFloat\nRelative absorption by Chlorophyll+Carotenoid [-]\nα_SW::Vector{FT} where FT<:AbstractFloat\nShortwave absorption, 1 .- ρSW .- τSW  [-]\nρ_LW::AbstractFloat\nBroadband thermal reflectance, related to blackbody emittance [-]\nρ_SW::Vector{FT} where FT<:AbstractFloat\nShortwave leaf reflectance [-]\nτ_LW::AbstractFloat\nBroadband thermal transmission, related to blackbody emittance [-]\nτ_SW::Vector{FT} where FT<:AbstractFloat\nShortwave leaf transmission [-]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.LeafBiophysics-Union{Tuple{WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.LeafBiophysics","text":"LeafBiophysics{FT}(wls::WaveLengthSet) where {FT<:AbstractFloat}\n\nConstructor for LeafBiophysics, given\n\nwls WaveLengthSet type structure\n\n\n\nExamples\n\nlbio = LeafBiophysics{FT}();\nlbio = LeafBiophysics{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.AbstractPhotosynthesisSystem","page":"API","title":"ClimaCache.AbstractPhotosynthesisSystem","text":"abstract type AbstractPhotosynthesisSystem{FT<:AbstractFloat}\n\nHierachy of AbstractSoilVC:\n\nC₃VJPSystem\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C₃VJPSystem","page":"API","title":"ClimaCache.C₃VJPSystem","text":"C₃VJPSystem{FT}(; v_max25::Number = 50, j_max25::Number = 83.5, r_d25::Number = 0.75) where {FT<:AbstractFloat}\n\nConstructor for C₃VJPSystem, given\n\nv_max25 Maximal carboxylation rate at 298.15 K\nj_max25 Maximal electron transport rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\n\n\n\nExamples\n\nc3 = C₃VJPSystem{Float64}();\nc3 = C₃VJPSystem{Float64}(v_max25 = 30, j_max25 = 50, r_d25 = 1);\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.C₃VJPSystem-Union{Tuple{}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.C₃VJPSystem","text":"C₃VJPSystem{FT}(; v_max25::Number = 50, j_max25::Number = 83.5, r_d25::Number = 0.75) where {FT<:AbstractFloat}\n\nConstructor for C₃VJPSystem, given\n\nv_max25 Maximal carboxylation rate at 298.15 K\nj_max25 Maximal electron transport rate at 298.15 K\nr_d25 Respiration rate at 298.15 K\n\n\n\nExamples\n\nc3 = C₃VJPSystem{Float64}();\nc3 = C₃VJPSystem{Float64}(v_max25 = 30, j_max25 = 50, r_d25 = 1);\n\n\n\n\n\n","category":"method"},{"location":"API/#Radiation","page":"API","title":"Radiation","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"HyperspectralRadiation\nHyperspectralRadiation{FT}(wls::WaveLengthSet) where {FT<:AbstractFloat}\nWaveLengthSet\nWaveLengthSet{FT}(swl::Vector) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.HyperspectralRadiation","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"mutable struct HyperspectralRadiation{FT<:AbstractFloat}\n\nStructure that stores hyperspectral radiation information\n\nFields\n\ne_direct::Vector{FT} where FT<:AbstractFloat\nDirect radiation [mW m⁻² nm⁻¹]\ne_diffuse::Vector{FT} where FT<:AbstractFloat\nDiffuse radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.HyperspectralRadiation-Union{Tuple{WaveLengthSet}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.HyperspectralRadiation","text":"HyperspectralRadiation{FT}(wls::WaveLengthSet = WaveLengthSet{FT}(), file::String = FILE_SUN)\n\nConstructor for HyperspectralRadiation, given\n\nwls WaveLengthSet type struct that defines wavelength settings\nfile File path to solar radiation setting, default is ClimaCache.FILE_SUN\n\n\n\nExamples\n\nrad = HyperspectralRadiation{FT}();\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)));\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)); file = \"\");\nrad = HyperspectralRadiation{FT}(WaveLengthSet{FT}(collect(400:50:2400)); file = ClimaCache.FILE_SUN);\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.WaveLengthSet","page":"API","title":"ClimaCache.WaveLengthSet","text":"mutable struct WaveLengthSet{FT<:AbstractFloat}\n\nStructure that stores wave length information.\n\nFields\n\nIΛ_NIR::Vector{Int64}\nIndicies of Λ_NIR in Λ\nIΛ_PAR::Vector{Int64}\nIndicies of Λ_PAR in Λ\nIΛ_SIF::Vector{Int64}\nIndicies of Λ_SIF in Λ\nIΛ_SIFE::Vector{Int64}\nIndicies of Λ_SIFE in Λ\nNΛ::Int64\nNumber of wavelength bins\nNΛ_PAR::Int64\nNumber of wavelength bins for PAR\nNΛ_SIF::Int64\nNumber of wavelength bins for SIF\nNΛ_SIFE::Int64\nNumber of wavelength bins for SIF excitation\nWL_NIR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for NIR [nm]\nWL_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength limits for PAR [nm]\nWL_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF emission [nm]\nWL_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength limits for SIF excitation [nm]\nSΛ::Vector{FT} where FT<:AbstractFloat\nStandard wavelength (boundaries) [nm]\nΔΛ::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength [nm]\nΔΛ_PAR::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for PAR [nm]\nΔΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nDifferential wavelength for SIF excitation [nm]\nΛ::Vector{FT} where FT<:AbstractFloat\nWavelength (bins) [nm]\nΛ_PAR::Vector{FT} where FT<:AbstractFloat\nWavelength bins for PAR [nm]\nΛ_SIF::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF [nm]\nΛ_SIFE::Vector{FT} where FT<:AbstractFloat\nWavelength bins for SIF excitation [nm]\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.WaveLengthSet-Union{Tuple{Vector{T} where T}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.WaveLengthSet","text":"WaveLengthSet{FT}(swl::Vector=WAVELENGTHS; opti::String=OPTI_2021) where {FT<:AbstractFloat}\n\nConstructor for WaveLengthSet, given\n\nswl Standard wave length boundaries [nm], default is ClimaCache.WAVELENGTHS\nopti Optical properties file path, default is ClimaCache.OPTI_2021\n\n\n\nExamples\n\nwls = WaveLengthSet{FT}();\nwls = WaveLengthSet{FT}(collect(400:5:2500));\nwls = WaveLengthSet{FT}(collect(400:5:2500); opti=ClimaCache.OPTI_2017);\n\n\n\n\n\n","category":"method"},{"location":"API/#Soil","page":"API","title":"Soil","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractSoilVC\nBrooksCorey\nVanGenuchten\nVanGenuchten{FT}(name::String, α::Number, n::Number, θ_sat::Number, θ_res::Number) where {FT<:AbstractFloat}\nVanGenuchten{FT}(name::String) where {FT<:AbstractFloat}","category":"page"},{"location":"API/#ClimaCache.AbstractSoilVC","page":"API","title":"ClimaCache.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT<:AbstractFloat}\n\nHierachy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.BrooksCorey","page":"API","title":"ClimaCache.BrooksCorey","text":"struct BrooksCorey{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nTYPE::String\nSoil type\nB::AbstractFloat\nSoil b\nΨ_SAT::AbstractFloat\nPotential at saturation [MPa]\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten","page":"API","title":"ClimaCache.VanGenuchten","text":"struct VanGenuchten{FT<:AbstractFloat} <: ClimaCache.AbstractSoilVC{FT<:AbstractFloat}\n\nvan Genuchten soil parameters\n\nFields\n\nTYPE::String\nSoil type\nΑ::AbstractFloat\nSoil α is related to the inverse of the air entry suction, α > 0\nN::AbstractFloat\nSoil n is Measure of the pore-size distribution\nM::AbstractFloat\nSoil m = 1 - 1/n\nΘ_SAT::AbstractFloat\nSaturated soil volumetric water content\nΘ_RES::AbstractFloat\nResidual soil volumetric water content\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{FT}, Tuple{String, Number, Number, Number, Number}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String, α::Number, n::Number, θ_sat::Number, θ_res::Number) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name\nα van Genuchten α\nn van Genuchten n\nθ_sat Saturated soil volumetric water content\nθ_res Residual soil volumetric water content\n\n\n\nExamples\n\nvg = VanGenuchten{FT}(\"Test\", FT(100), FT(2), FT(0.5), FT(0.1));\n\n\n\n\n\n","category":"method"},{"location":"API/#ClimaCache.VanGenuchten-Union{Tuple{String}, Tuple{FT}} where FT<:AbstractFloat","page":"API","title":"ClimaCache.VanGenuchten","text":"VanGenuchten{FT}(name::String) where {FT<:AbstractFloat}\n\nConstructor for VanGenuchten, given\n\nname Soil type name, need to be Sand, Loamy Sand, Sandy Loam, Loam, Sandy Clay Loam, Silt Loam, Silt (default), Clay Loam, Silty Clay Loam, Sandy Clay, Silty Clay, and Clay.\n\n\n\nExamples\n\nvg = VanGenuchten{FT}(\"\");\nvg = VanGenuchten{FT}(\"Loam\");\n\n\n\n\n\n","category":"method"}]
}
